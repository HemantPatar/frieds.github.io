<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan Friedman's Data Science Knowledge Base - Data Analysis</title><link href="https://dfrieds.com/" rel="alternate"></link><link href="https://dfrieds.com/feeds/data-analysis.atom.xml" rel="self"></link><id>https://dfrieds.com/</id><updated>2019-08-26T06:55:00-07:00</updated><entry><title>Calculations for Popular Business Metrics</title><link href="https://dfrieds.com/data-analysis/calculations-popular-business-metrics" rel="alternate"></link><published>2019-08-26T06:55:00-07:00</published><updated>2019-08-26T06:55:00-07:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2019-08-26:/data-analysis/calculations-popular-business-metrics</id><summary type="html">&lt;p&gt;Understand calculations for common business metrics such as a sum, count, percentile, ratio and probability&lt;/p&gt;</summary><content type="html">&lt;p&gt;On the job, I'm often asked to setup a measurement plan for a new app feature or quantify something that's happend in the past. There's several common calculations for metrics including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sum: result of adding numbers&lt;/li&gt;
&lt;li&gt;Count: total number of occurences of something&lt;/li&gt;
&lt;li&gt;Average: a number to regard the central tendancy of a set of values calculated as the sum of a condition divided by the count of occurences of that condition&lt;/li&gt;
&lt;li&gt;Percentile: a value that represents a threshold for the percentage of data points less than the value&lt;/li&gt;
&lt;li&gt;Ratio: comparison of two numbers into a value&lt;/li&gt;
&lt;li&gt;Probability: how likely something is to happen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post, I'll walk through a scenario in which I am asked to calculate the &lt;em&gt;success&lt;/em&gt; of a website homepage that's for a note-taking app. &lt;em&gt;Success&lt;/em&gt; is a vague word and there's lots of ways we can characterize it. With each metric using a calculation from the list above, I'll align that metric to be relevant to overall business goal: get as many weekly active users as possible.&lt;/p&gt;
&lt;p&gt;The homepage is just meant to educate people about the note-taking app and encourage them to sign up. There's a lot of content on the homepage about the features of the app and there's a single signup button to create an account and use the note-taking app. &lt;/p&gt;
&lt;p&gt;A caveat: this is a very simple business example and this post is meant to introduce popular calculations for metrics. For a real-world project, I'd encourage you to understand your business problems, business goals and the pros and cons of each potential metric you choose.&lt;/p&gt;
&lt;h3&gt;Setup Code and Data&lt;/h3&gt;
&lt;h4&gt;Import Modules&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Generate Data&lt;/h4&gt;
&lt;p&gt;I'll generate relevant session data we can use to compute all metrics above.&lt;/p&gt;
&lt;p&gt;Below I create 17 sessions in which each session is simplified to a visitor landing on the homepage only and then either clicking the signup button or leaving the site.&lt;/p&gt;
&lt;p&gt;For each session, there's a:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cookie id to represent a unique value for a visitor based on the visitor's browser&lt;/li&gt;
&lt;li&gt;timestamp for when the visitor lands on the homepage&lt;/li&gt;
&lt;li&gt;a value to represent the timestamp for when a user clicked the signup button or an &lt;code&gt;NaT&lt;/code&gt; value to represent not a timestamp meaning the visitor never clicked the signup button&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session_start_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;microsecond&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;signup_button_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session_start_time&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;random_seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session_start_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;click_signup_button_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;count_of_sessions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;

&lt;span class="n"&gt;cookie_ids_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cookie_ids_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;random_seconds_between_session_start_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session_start_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session_start_time&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;random_seconds_between_session_start_times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;random_seconds_to_signup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;click_signup_button_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session_start_time&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;random_seconds_to_signup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# randomly choose either the signup button time or np.NaN to be no button click&lt;/span&gt;
    &lt;span class="n"&gt;click_signup_button_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;click_signup_button_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;session_start_times&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session_start_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;click_signup_button_times&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;click_signup_button_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a Pandas dataframe from &lt;code&gt;session_start_times&lt;/code&gt; and &lt;code&gt;signup_button_times&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cookie_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cookie_ids_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;session_start_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;session_start_times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;click_signup_button_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;click_signup_button_times&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;df_sessions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View entire dataset.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_sessions&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;cookie_id&lt;/th&gt;
      &lt;th&gt;session_start_time&lt;/th&gt;
      &lt;th&gt;click_signup_button_time&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:19&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:28&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:36&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:33&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:45&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:01:29&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:54&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:02:00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:01:08&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:02:20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:01:15&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:01:35&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:03:06&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:01:49&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:02:35&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:02:01&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:02:16&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:03:49&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:02:23&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:02:27&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:02:36&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;13&lt;/th&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:02:39&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:03:45&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;14&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:02:56&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:04:13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;15&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:03:08&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;16&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:03:18&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:04:07&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;Sum Metric&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;sum&lt;/strong&gt; is the result of adding things. Given the dataset, I don't think there's a single sum metric that's relevant to the business' goals. However, the sum is a calculation necessary to know the average time a visitor spends on the page before clicking the signup button. We'll revisit this calculation later in the ratio section.&lt;/p&gt;
&lt;h3&gt;Count Metric&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;count&lt;/strong&gt; is the total number of occurences of something. A relevant count metric for our business goals is the count of sessions. My hypothesis is that more sessions on the homepage will result in more signups which will likely result in more weekly active users. Therefore, the business wants more sessions per day.&lt;/p&gt;
&lt;p&gt;I can use the Python &lt;a href="https://docs.python.org/3/library/functions.html#len" target="_blank"&gt;len() function&lt;/a&gt; to count the number of session in the dataset.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;count_sessions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_sessions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;count_sessions&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;17
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There were 18 sessions.&lt;/p&gt;
&lt;p&gt;Another relevant count metric is the count of unique visitors to the site in a day. I'll assume each cookie used on a visitors' browser was used properly and corresponds to each user.&lt;/p&gt;
&lt;p&gt;I can count the unique values in the &lt;code&gt;cookie_id&lt;/code&gt; field by using the Pandas series &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.unique.html" target="_blank"&gt;&lt;code&gt;unique()&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cookie_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nunique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;14
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There were 14 distinct visitors to the homepage.&lt;/p&gt;
&lt;h3&gt;Average Metric&lt;/h3&gt;
&lt;p&gt;An &lt;strong&gt;average&lt;/strong&gt; is the "central" value from a set of numbers. A relevant average metric that aligns with the business goals is the average time it takes somebody sign up from landing on the homepage first. This average metric gives us a baseline for how much consideration it takes someone to sign up. &lt;/p&gt;
&lt;p&gt;I need to create a new column that's the time duration for each user to sign up after landing on the homepage. I will subtract &lt;code&gt;click_signup_button_time&lt;/code&gt; - &lt;code&gt;session_start_time&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time_duration_until_signup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;click_signup_button_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;df_sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;session_start_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Preview the first few sessions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_sessions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;cookie_id&lt;/th&gt;
      &lt;th&gt;session_start_time&lt;/th&gt;
      &lt;th&gt;click_signup_button_time&lt;/th&gt;
      &lt;th&gt;time_duration_until_signup&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:19&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:28&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:36&lt;/td&gt;
      &lt;td&gt;00:00:08&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:33&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:45&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:01:29&lt;/td&gt;
      &lt;td&gt;00:00:44&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:54&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:02:00&lt;/td&gt;
      &lt;td&gt;00:01:06&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I can use the Pandas &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.mean.html" target="_blank"&gt;&lt;code&gt;mean()&lt;/code&gt; method&lt;/a&gt; to calculate the average of the &lt;code&gt;time_duration_until_signup&lt;/code&gt; values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time_duration_until_signup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Timedelta(&amp;#39;0 days 00:00:56.454545&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For users that do sign up, the average time it takes someone to click the signup button after landing on the homepage is approximately 56 seconds.&lt;/p&gt;
&lt;h3&gt;Percentile&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;percentile&lt;/strong&gt; represents a threshold in which there's a percentage of data points less than that value. A frequently used percentile value is the 50th percentile which represents the median. This means there are approximately 50% of data points smaller than the median value.&lt;/p&gt;
&lt;p&gt;Median can be especially helpful to understand the central tendancy of a set of values when there's a skewness in the values. You can learn more on my &lt;a href="https://dfrieds.com/math/skewness" target="_blank"&gt;skewness article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I can calculate the median &lt;code&gt;time_duration_until_signup&lt;/code&gt; value using the &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.median.htmlz" target="_blank"&gt;&lt;code&gt;median&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time_duration_until_signup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Timedelta(&amp;#39;0 days 00:01:06&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The median is approximately 1 minute and 6 seconds. In approximately half of sessions with signups, visitors spent less than 1 minute and 6 seconds.&lt;/p&gt;
&lt;h3&gt;Ratio&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;ratio&lt;/strong&gt; comparison of two numbers into a value. One ratio that's critical to the business' goal is to know the proportion of homepage visits that end up with a click on a signup button. This rate is commony called the clickthrough rate. The higher this rate, the more signups and likely more weekly active users down the road. &lt;/p&gt;
&lt;p&gt;Let's first count the number of sessions that have a click of the signup button. I'll count the number of non-null values in the &lt;code&gt;click_signup_button_time&lt;/code&gt; field using the Pandas series &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.notnull.html&lt;code&gt;" target="_blank"&amp;gt;&lt;/code&gt;notnull()` method&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;signup_button_clicks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df_sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;click_signup_button_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notnull&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
&lt;span class="n"&gt;signup_button_clicks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;11
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ratio_clicks_to_session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signup_button_clicks&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;count_sessions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ratio_clicks_to_session&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.65
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;0.65 sessions resulted in a signup button click. The higher this ratio, the greater % of visitors we can convert to signup and this would help expand our pool of more potential weekly active users.&lt;/p&gt;
&lt;h3&gt;Probability&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;cookie_id&lt;/code&gt; should specify each visitor to the site based on their browser. One interesting observation is &lt;code&gt;cookie_id&lt;/code&gt; of &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; each made a visit to the homepage, didn't signed up, but later revisited the homepage and did signup. &lt;/p&gt;
&lt;p&gt;I'm curious about the click through probability. This is a metric to define if a unique visitor signed up. The calculation is the count of unique visitors (represented by the &lt;code&gt;cookie_id&lt;/code&gt;) who clicked the button divided by the count of unique visitors.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_sessions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;cookie_id&lt;/th&gt;
      &lt;th&gt;session_start_time&lt;/th&gt;
      &lt;th&gt;click_signup_button_time&lt;/th&gt;
      &lt;th&gt;time_duration_until_signup&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:19&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:28&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:36&lt;/td&gt;
      &lt;td&gt;00:00:08&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:33&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:45&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:01:29&lt;/td&gt;
      &lt;td&gt;00:00:44&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:00:54&lt;/td&gt;
      &lt;td&gt;2019-08-25 15:02:00&lt;/td&gt;
      &lt;td&gt;00:01:06&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;count_unique_visitors_who_signed_up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df_sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;click_signup_button_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notnull&lt;/span&gt;&lt;span class="p"&gt;()][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cookie_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nunique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;count_unique_visitors_who_signed_up&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;11
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;count_unique_visitors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_ssessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cookie_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nunique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;count_unique_visitors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;14
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;click_through_probability&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count_unique_visitors_who_signed_up&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;count_unique_visitors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;click_through_probability&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.79
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The click through probability is 0.79 which means 79% of unique visitors to the homepage created an account. The higher this probability, the greater % of visitors we can convert to signup and this would help increase our pool of more potential weekly active users.&lt;/p&gt;</content><category term="business metrics"></category><category term="python"></category><category term="pandas"></category></entry><entry><title>cut() Method: Bin Values into Discrete Intervals</title><link href="https://dfrieds.com/data-analysis/bin-values-python-pandas" rel="alternate"></link><published>2019-07-16T19:10:00-07:00</published><updated>2019-07-16T19:10:00-07:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2019-07-16:/data-analysis/bin-values-python-pandas</id><summary type="html">&lt;p&gt;Learn how to bin values in Python with pandas using the cut() method and through simple examples&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Import Modules&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Why Bin Data&lt;/h3&gt;
&lt;p&gt;Often times you have numerical data on very large scales. Sometimes, it can be easier to bin the values into groups. This is helpful to more easily perform descriptive statistics by groups as a generalization of patterns in the data.&lt;/p&gt;
&lt;h3&gt;Binning in Pandas with Age Example&lt;/h3&gt;
&lt;h4&gt;Create Random Age Data&lt;/h4&gt;
&lt;p&gt;First, let's create a simple pandas DataFrame assigned to the variable &lt;code&gt;df_ages&lt;/code&gt; with just one colum for &lt;code&gt;age&lt;/code&gt;. This column will contain &lt;code&gt;8&lt;/code&gt; random age values between &lt;code&gt;21&lt;/code&gt; inclusive and &lt;code&gt;51&lt;/code&gt; exclusive,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_ages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Print out&lt;code&gt;df_ages&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_ages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;age&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;45&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;47&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;37&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;41&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;29&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;49&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;Create New Column of &lt;code&gt;age_bins&lt;/code&gt; Via Defining Bin Edges&lt;/h3&gt;
&lt;p&gt;This code creates a new column called &lt;code&gt;age_bins&lt;/code&gt; that sets the &lt;code&gt;x&lt;/code&gt; argument to the &lt;code&gt;age&lt;/code&gt; column in &lt;code&gt;df_ages&lt;/code&gt; and sets the &lt;code&gt;bins&lt;/code&gt; argument to a list of bin edge values. The left bin edge will be exclusive and the right bin edge will be inclusive.&lt;/p&gt;
&lt;p&gt;The bins will be for ages: &lt;code&gt;(20, 29]&lt;/code&gt; (someone in their 20s), &lt;code&gt;(30, 39]&lt;/code&gt;, and &lt;code&gt;(40, 49]&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_ages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age_bins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_ages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Print out&lt;code&gt;df_ages&lt;/code&gt;. We can see &lt;code&gt;age&lt;/code&gt; values are assigned to a proper bin.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_ages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;age&lt;/th&gt;
      &lt;th&gt;age_bins&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;45&lt;/td&gt;
      &lt;td&gt;(39, 49]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;47&lt;/td&gt;
      &lt;td&gt;(39, 49]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;37&lt;/td&gt;
      &lt;td&gt;(29, 39]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;41&lt;/td&gt;
      &lt;td&gt;(39, 49]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;29&lt;/td&gt;
      &lt;td&gt;(20, 29]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;(29, 39]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;(29, 39]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;49&lt;/td&gt;
      &lt;td&gt;(39, 49]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Let's verify the unique &lt;code&gt;age_bins&lt;/code&gt; values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_ages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age_bins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[(39, 49], (29, 39], (20, 29]]&lt;/span&gt;
&lt;span class="na"&gt;Categories (3, interval[int64]): [(20, 29] &amp;lt; (29, 39] &amp;lt; (39, 49]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Create New Column of of &lt;code&gt;age_by_decade&lt;/code&gt; With Labels &lt;code&gt;20s&lt;/code&gt;, &lt;code&gt;30s&lt;/code&gt;, and &lt;code&gt;40s&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This code creates a new column called &lt;code&gt;age_by_decade&lt;/code&gt; with the same first 2 arguments as above, and a third argument of &lt;code&gt;labels&lt;/code&gt; set to a list of values that correspond to how the age values will be put in bins by decades.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_ages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age_by_decade&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_ages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;20s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;30s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;40s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Print out&lt;code&gt;df_ages&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_ages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;age&lt;/th&gt;
      &lt;th&gt;age_bins&lt;/th&gt;
      &lt;th&gt;age_by_decade&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;45&lt;/td&gt;
      &lt;td&gt;(39, 49]&lt;/td&gt;
      &lt;td&gt;40s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;47&lt;/td&gt;
      &lt;td&gt;(39, 49]&lt;/td&gt;
      &lt;td&gt;40s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;37&lt;/td&gt;
      &lt;td&gt;(29, 39]&lt;/td&gt;
      &lt;td&gt;30s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;41&lt;/td&gt;
      &lt;td&gt;(39, 49]&lt;/td&gt;
      &lt;td&gt;40s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;29&lt;/td&gt;
      &lt;td&gt;(20, 29]&lt;/td&gt;
      &lt;td&gt;20s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;(29, 39]&lt;/td&gt;
      &lt;td&gt;30s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;(29, 39]&lt;/td&gt;
      &lt;td&gt;30s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;49&lt;/td&gt;
      &lt;td&gt;(39, 49]&lt;/td&gt;
      &lt;td&gt;40s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Learn more about the Pandas &lt;code&gt;cut()&lt;/code&gt; method from the &lt;a href='https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.cut.html' target="_blank"&gt;official documentation page&lt;/a&gt;.&lt;/p&gt;</content><category term="categorical data"></category><category term="python"></category><category term="pandas"></category><category term="bin"></category></entry><entry><title>shift() Method: Shift Values in Column Up or Down</title><link href="https://dfrieds.com/data-analysis/shift-method-python-pandas" rel="alternate"></link><published>2019-04-21T08:05:00-07:00</published><updated>2019-04-21T08:05:00-07:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2019-04-21:/data-analysis/shift-method-python-pandas</id><summary type="html">&lt;p&gt;Utilize the shift() method for a pandas series to shift values in a column up or down. This is equivalent to LAG() or LEAD() window functions in SQL.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href='https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.shift.html' target='_blank'&gt;&lt;code&gt;shift()&lt;/code&gt; method&lt;/a&gt; for a pandas series helps shift values in a column up or down. This is similar to using the SQL window functions for &lt;code&gt;LAG()&lt;/code&gt; and &lt;code&gt;LEAD()&lt;/code&gt;. You can learn about these SQL window functions via &lt;a href='https://mode.com/resources/sql-tutorial/sql-window-functions/' target='_blank'&gt;Mode's SQL tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this tutorial, I'll walk through an example of using the &lt;code&gt;shift()&lt;/code&gt; pandas series method for analyzing bike rides.&lt;/p&gt;
&lt;h3&gt;Setup Code&lt;/h3&gt;
&lt;h4&gt;Import Module&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example 1: Duration Idle Time Between Bike Rides&lt;/h3&gt;
&lt;p&gt;In this example, I assume a service in which I lend out a single bike for people to ride throughout the day in San Francisco. Each record in the dataset is the start and end time for a ride.&lt;/p&gt;
&lt;h4&gt;Create Bike Rides Data&lt;/h4&gt;
&lt;p&gt;The code below creates a list of start and end times of rides.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ride_start_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ride_end_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ride_start_time&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ride_start_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;ride_end_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;count_of_rides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ride&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count_of_rides&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;minutes_between_rides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ride_start_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ride_end_time&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;minutes_between_rides&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;minutes_riding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ride_end_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ride_start_time&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;minutes_riding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;ride_start_times&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ride_start_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ride_end_times&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ride_end_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a pandas dataframe given the lists &lt;code&gt;ride_start_times&lt;/code&gt; and &lt;code&gt;ride_end_times&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ride_start_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ride_start_times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ride_end_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;ride_end_times&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;df_bike_rides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View the newly created dataframe &lt;code&gt;df_bike_rides&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_rides&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;ride_start_time&lt;/th&gt;
      &lt;th&gt;ride_end_time&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2019-04-21 21:23:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-04-21 22:43:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-04-21 23:07:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2019-04-22 01:00:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2019-04-22 02:14:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2019-04-22 03:45:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 03:55:29.711347&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h4&gt;Find the Mean Duration of Time, in Minutes, Bike is Left Idle Between Rides&lt;/h4&gt;
&lt;p&gt;For example, the first ride ended around 4:24PM and was next used for a ride at 5:52PM. I want to calculate a new column that states there was approximately 86 minutes, equivalent to approximately 5160 seconds, of idle time between these rides.&lt;/p&gt;
&lt;p&gt;I want to do a column-by-column comparison. I use the &lt;code&gt;shift()&lt;/code&gt; method to create a new column in &lt;code&gt;df_bike_rides&lt;/code&gt; that's a shift of value in &lt;code&gt;ride_end_time&lt;/code&gt; down one period.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_rides&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;previous_ride_end_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_bike_rides&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ride_end_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;periods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View &lt;code&gt;df_bike_rides&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_rides&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;ride_start_time&lt;/th&gt;
      &lt;th&gt;ride_end_time&lt;/th&gt;
      &lt;th&gt;previous_ride_end_time&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2019-04-21 21:23:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-04-21 22:43:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-04-21 23:07:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2019-04-22 01:00:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2019-04-22 02:14:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2019-04-22 03:45:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 03:55:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;shift()&lt;/code&gt; method for a pandas series is similar to a window function in SQL using &lt;code&gt;LAG()&lt;/code&gt; and &lt;code&gt;LEAD()&lt;/code&gt;. The same operation above would look like the following in SQL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LAG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ride_end_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;ride_start_time&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;previous_ride_end_time&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;df_bike_rides&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;ride_start_time&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Given this new column for &lt;code&gt;previous_ride_end_time&lt;/code&gt;, I can subtract the time between a new bike ride's start time and the previous ride's end time. The result is the duration the bike was idle between rides.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_rides&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;duration_bike_idle_between_rides&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_bike_rides&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ride_start_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;df_bike_rides&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;previous_ride_end_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View &lt;code&gt;df_bike_rides&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_rides&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;ride_start_time&lt;/th&gt;
      &lt;th&gt;ride_end_time&lt;/th&gt;
      &lt;th&gt;previous_ride_end_time&lt;/th&gt;
      &lt;th&gt;duration_bike_idle_between_rides&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2019-04-21 21:23:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-04-21 22:43:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
      &lt;td&gt;01:02:00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-04-21 23:07:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
      &lt;td&gt;00:16:00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2019-04-22 01:00:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
      &lt;td&gt;01:37:00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2019-04-22 02:14:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
      &lt;td&gt;00:55:00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2019-04-22 03:45:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 03:55:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
      &lt;td&gt;01:25:00&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The new column &lt;code&gt;duration_bike_idle_between_rides&lt;/code&gt; shows the duration of idle bike time between rides in the format HH-MM-SS. The value of &lt;code&gt;01:02:00&lt;/code&gt; is equivalent to saying &lt;em&gt;1 hour and 2 minutes&lt;/em&gt;. Below, I convert that timedelta format into a single numerical value of minutes. I utilize the &lt;code&gt;dt&lt;/code&gt; accessor and &lt;code&gt;total_seconds()&lt;/code&gt; &lt;a href='https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.total_seconds.html' target="_blank"&gt;method&lt;/a&gt; to calculate the total seconds a bike is idle between rides. Then I divide this value by &lt;code&gt;60&lt;/code&gt; to get a value in minutes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_rides&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;minutes_bike_idle_between_rides&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_bike_rides&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;duration_bike_idle_between_rides&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_seconds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View &lt;code&gt;df_bike_rides&lt;/code&gt; below with a new column for the &lt;code&gt;minutes_bike_idle_between_rides&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_rides&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;ride_start_time&lt;/th&gt;
      &lt;th&gt;ride_end_time&lt;/th&gt;
      &lt;th&gt;previous_ride_end_time&lt;/th&gt;
      &lt;th&gt;duration_bike_idle_between_rides&lt;/th&gt;
      &lt;th&gt;minutes_bike_idle_between_rides&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2019-04-21 21:23:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-04-21 22:43:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
      &lt;td&gt;01:02:00&lt;/td&gt;
      &lt;td&gt;62.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-04-21 23:07:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
      &lt;td&gt;00:16:00&lt;/td&gt;
      &lt;td&gt;16.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2019-04-22 01:00:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
      &lt;td&gt;01:37:00&lt;/td&gt;
      &lt;td&gt;97.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2019-04-22 02:14:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
      &lt;td&gt;00:55:00&lt;/td&gt;
      &lt;td&gt;55.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2019-04-22 03:45:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 03:55:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
      &lt;td&gt;01:25:00&lt;/td&gt;
      &lt;td&gt;85.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I calculate the mean &lt;code&gt;minutes_bike_idle_between_rides&lt;/code&gt; value as 63 minutes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;avg_minutes_bikes_idle_between_rides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_bike_rides&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;minutes_bike_idle_between_rides&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;avg_minutes_bikes_idle_between_rides&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;63.0
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example 2: Duration Idle Time Between Bike Rides Per Unique Bike&lt;/h3&gt;
&lt;p&gt;This example below is similar to the one above. However, I assume I now operate a fleet of 2 bikes and rent them out for people to ride to specific stations in the city of San Francisco. &lt;/p&gt;
&lt;p&gt;Below I create a pandas dataframe with details on bike ride times, the bike id and the start and end station.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ride_start_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ride_start_times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ride_end_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;ride_end_times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;bike_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;start_station&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;21st &amp;amp; Folsom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;21st &amp;amp; Folsom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4th &amp;amp; King&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;24th &amp;amp; Valencia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4th &amp;amp; King&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;16th and Mission&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;end_station&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;4th &amp;amp; King&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4th &amp;amp; King&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;24th &amp;amp; Valencia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Embarcadero &amp;amp; Market&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;16th and Mission&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4th &amp;amp; King&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View &lt;code&gt;df_bike_sharing&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;ride_start_time&lt;/th&gt;
      &lt;th&gt;ride_end_time&lt;/th&gt;
      &lt;th&gt;bike_id&lt;/th&gt;
      &lt;th&gt;start_station&lt;/th&gt;
      &lt;th&gt;end_station&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2019-04-21 21:23:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;21st &amp;amp; Folsom&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-04-21 22:43:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;21st &amp;amp; Folsom&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-04-21 23:07:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2019-04-22 01:00:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
      &lt;td&gt;Embarcadero &amp;amp; Market&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2019-04-22 02:14:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2019-04-22 03:45:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 03:55:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I sort &lt;code&gt;df_bike_sharing&lt;/code&gt; first by the &lt;code&gt;bike_id&lt;/code&gt; column and then the &lt;code&gt;ride_start_time&lt;/code&gt; column.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bike_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ride_start_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;ride_start_time&lt;/th&gt;
      &lt;th&gt;ride_end_time&lt;/th&gt;
      &lt;th&gt;bike_id&lt;/th&gt;
      &lt;th&gt;start_station&lt;/th&gt;
      &lt;th&gt;end_station&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2019-04-21 21:23:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;21st &amp;amp; Folsom&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-04-21 23:07:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2019-04-22 01:00:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
      &lt;td&gt;Embarcadero &amp;amp; Market&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-04-21 22:43:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;21st &amp;amp; Folsom&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2019-04-22 02:14:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2019-04-22 03:45:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 03:55:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;For the &lt;code&gt;bike_id&lt;/code&gt; column, I shift down values by 1 to create a new column called &lt;code&gt;previous_bike_id&lt;/code&gt;. I do this so I can easily compare a bike id to the previous ride's ID to identify the last ride by a bike id for a day.&lt;/p&gt;
&lt;p&gt;Similar to LAG()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;previous_bike_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bike_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;periods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;ride_start_time&lt;/th&gt;
      &lt;th&gt;ride_end_time&lt;/th&gt;
      &lt;th&gt;bike_id&lt;/th&gt;
      &lt;th&gt;start_station&lt;/th&gt;
      &lt;th&gt;end_station&lt;/th&gt;
      &lt;th&gt;previous_bike_id&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2019-04-21 21:23:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;21st &amp;amp; Folsom&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-04-21 23:07:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2019-04-22 01:00:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
      &lt;td&gt;Embarcadero &amp;amp; Market&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-04-21 22:43:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;21st &amp;amp; Folsom&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2019-04-22 02:14:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2019-04-22 03:45:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 03:55:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;In SQL, this operation would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LAG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bike_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;bike_id&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ride_start_time&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;previous_bike_id&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;df_bike_sharing&lt;/span&gt; 
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;bike_id&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ride_start_time&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For the &lt;code&gt;ride_end_time&lt;/code&gt; column, I shift down values by 1 to create a new column called &lt;code&gt;previous_ride_end_time&lt;/code&gt;. I do this so I can later find the idle bike time between rides.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;previous_ride_end_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ride_end_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;periods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;ride_start_time&lt;/th&gt;
      &lt;th&gt;ride_end_time&lt;/th&gt;
      &lt;th&gt;bike_id&lt;/th&gt;
      &lt;th&gt;start_station&lt;/th&gt;
      &lt;th&gt;end_station&lt;/th&gt;
      &lt;th&gt;previous_bike_id&lt;/th&gt;
      &lt;th&gt;previous_ride_end_time&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2019-04-21 21:23:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;21st &amp;amp; Folsom&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-04-21 23:07:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2019-04-22 01:00:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
      &lt;td&gt;Embarcadero &amp;amp; Market&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-04-21 22:43:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;21st &amp;amp; Folsom&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2019-04-22 02:14:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2019-04-22 03:45:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 03:55:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We only want to calculate a duration the bike was idle in a row if it's a comparison for the same bike id. Below I show the code to replace all values in a row with &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;NaT&lt;/code&gt; if the condition is false. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bike_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;previous_bike_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;ride_start_time&lt;/th&gt;
      &lt;th&gt;ride_end_time&lt;/th&gt;
      &lt;th&gt;bike_id&lt;/th&gt;
      &lt;th&gt;start_station&lt;/th&gt;
      &lt;th&gt;end_station&lt;/th&gt;
      &lt;th&gt;previous_bike_id&lt;/th&gt;
      &lt;th&gt;previous_ride_end_time&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;NaT&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-04-21 23:07:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2019-04-22 01:00:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
      &lt;td&gt;Embarcadero &amp;amp; Market&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;NaT&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2019-04-22 02:14:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2019-04-22 03:45:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 03:55:29.711347&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;With the above change, I calculate &lt;code&gt;ride_start_time&lt;/code&gt; minus &lt;code&gt;previous_ride_end_time&lt;/code&gt; where the above condition holds True. With that calculation, I create a new column called &lt;code&gt;duration_bike_idle&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;duration_bike_idle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ride_start_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;previous_ride_end_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bike_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;previous_bike_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;ride_start_time&lt;/th&gt;
      &lt;th&gt;ride_end_time&lt;/th&gt;
      &lt;th&gt;bike_id&lt;/th&gt;
      &lt;th&gt;start_station&lt;/th&gt;
      &lt;th&gt;end_station&lt;/th&gt;
      &lt;th&gt;duration_bike_idle&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2019-04-21 21:23:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;21st &amp;amp; Folsom&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-04-21 23:07:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
      &lt;td&gt;01:26:00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2019-04-22 01:00:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
      &lt;td&gt;Embarcadero &amp;amp; Market&lt;/td&gt;
      &lt;td&gt;01:37:00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-04-21 22:43:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;21st &amp;amp; Folsom&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2019-04-22 02:14:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
      &lt;td&gt;03:23:00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2019-04-22 03:45:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 03:55:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;01:25:00&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I drop &lt;code&gt;previous_bike_id&lt;/code&gt; and &lt;code&gt;previous_ride_end_time&lt;/code&gt; since they were intermediary outputs used for calculations. They're not necessary for a final presentation of the critical details.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;previous_bike_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;previous_ride_end_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The new column &lt;code&gt;duration_bike_idle_seconds&lt;/code&gt; shows the duration of idle bike time between rides in the format HH-MM-SS. The value of &lt;code&gt;01:26:00&lt;/code&gt; is equivalent to saying &lt;em&gt;1 hour and 26 minutes&lt;/em&gt;. Below, I convert that timedelta format into a single numerical value of minutes. I utilize the &lt;code&gt;dt&lt;/code&gt; accessor and &lt;code&gt;total_seconds()&lt;/code&gt; &lt;a href='https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.total_seconds.html' target='_blank'&gt;method&lt;/a&gt; to calculate the total seconds a bike is idle between rides of the same bike id. Then I divide this value by &lt;code&gt;60&lt;/code&gt; to get a value in minutes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;duration_bike_idle_seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;duration_bike_idle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_seconds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;ride_start_time&lt;/th&gt;
      &lt;th&gt;ride_end_time&lt;/th&gt;
      &lt;th&gt;bike_id&lt;/th&gt;
      &lt;th&gt;start_station&lt;/th&gt;
      &lt;th&gt;end_station&lt;/th&gt;
      &lt;th&gt;duration_bike_idle&lt;/th&gt;
      &lt;th&gt;duration_bike_idle_seconds&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2019-04-21 21:23:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 21:41:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;21st &amp;amp; Folsom&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2019-04-21 23:07:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 23:23:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
      &lt;td&gt;01:26:00&lt;/td&gt;
      &lt;td&gt;5160.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2019-04-22 01:00:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 01:19:29.711347&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;24th &amp;amp; Valencia&lt;/td&gt;
      &lt;td&gt;Embarcadero &amp;amp; Market&lt;/td&gt;
      &lt;td&gt;01:37:00&lt;/td&gt;
      &lt;td&gt;5820.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2019-04-21 22:43:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-21 22:51:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;21st &amp;amp; Folsom&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;NaT&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2019-04-22 02:14:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 02:20:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
      &lt;td&gt;03:23:00&lt;/td&gt;
      &lt;td&gt;12180.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2019-04-22 03:45:29.711347&lt;/td&gt;
      &lt;td&gt;2019-04-22 03:55:29.711347&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;16th and Mission&lt;/td&gt;
      &lt;td&gt;4th &amp;amp; King&lt;/td&gt;
      &lt;td&gt;01:25:00&lt;/td&gt;
      &lt;td&gt;5100.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Here is the average seconds each &lt;code&gt;bike_id&lt;/code&gt; is idle during the day in seconds between the first and last ride. I group by the &lt;code&gt;bike_id&lt;/code&gt; column and calculate the mean of the &lt;code&gt;duration_bike_idle_seconds_time&lt;/code&gt; column. I reset the index and rename the columns so this final output is easier to understand.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_bike_sharing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bike_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;duration_bike_idle_seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;duration_bike_idle_seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;avg_seconds_idle_between_rides&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;bike_id&lt;/th&gt;
      &lt;th&gt;avg_seconds_idle_between_rides&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5490.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;8640.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Bike id of &lt;code&gt;22&lt;/code&gt; was left idle longer between rides than the bike id of &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;</content><category term="shift method"></category><category term="pandas"></category><category term="python"></category></entry><entry><title>Pandas rank() Method: Equivalent to ROW_NUMBER(), RANK(), DENSE_RANK() and NTILE() SQL Window Functions</title><link href="https://dfrieds.com/data-analysis/rank-method-python-pandas" rel="alternate"></link><published>2019-04-15T09:30:00-07:00</published><updated>2019-04-15T09:30:00-07:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2019-04-15:/data-analysis/rank-method-python-pandas</id><summary type="html">&lt;p&gt;Utilize the rank() method for pandas series - equivalent to ROW_NUMBER(), RANK(), DENSE_RANK() and NTILE() SQL window functions&lt;/p&gt;</summary><content type="html">&lt;p&gt;In SQL, popular window functions include: &lt;code&gt;ROW_NUMBER()&lt;/code&gt;, &lt;code&gt;RANK()&lt;/code&gt;, &lt;code&gt;DENSE_RANK()&lt;/code&gt; and &lt;code&gt;NTILE()&lt;/code&gt;. These are helpful for creating a new column that's a rank of some other values in a column, perhaps partitioned by one or multiple groups. You can learn about these SQL window functions via &lt;a href='https://mode.com/resources/sql-tutorial/sql-window-functions/' target='_blank'&gt;Mode's SQL tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, using pandas in Python, the &lt;a href='https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.rank.html' target="_blank"&gt;&lt;code&gt;rank()&lt;/code&gt; method&lt;/a&gt; for a series provides similar utility to the SQL window functions listed above.&lt;/p&gt;
&lt;p&gt;In this tutorial, I'll cover the &lt;code&gt;rank()&lt;/code&gt; method in pandas with an example of real estate transactions data and later quiz scores.&lt;/p&gt;
&lt;h3&gt;Setup Code&lt;/h3&gt;
&lt;h4&gt;Import Module&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Gradient Used to Highlight Table Outputs&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light_palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lightgreen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;as_cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example 1: Count of New Sellers Per Day&lt;/h3&gt;
&lt;h4&gt;Create Real Estate Transaction Dataset&lt;/h4&gt;
&lt;p&gt;I'll create a small dataset of 8 real estate transactions that include a close date and seller name for each house sale.&lt;/p&gt;
&lt;p&gt;Take note that Julia sold 5 homes with some transactions on separate days. Lara also sold 2 homes on different days.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2012-08-01&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-08-01&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-08-01&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-08-02&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-08-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-08-04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-08-05&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-08-07&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;seller_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lara&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Julia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Julia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Emily&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Julia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Lara&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Julia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Julia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View entire &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;close_date&lt;/th&gt;
      &lt;th&gt;seller_name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Lara&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2012-08-02&lt;/td&gt;
      &lt;td&gt;Emily&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2012-08-03&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2012-08-04&lt;/td&gt;
      &lt;td&gt;Lara&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;2012-08-05&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;2012-08-07&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Convert &lt;code&gt;close_date&lt;/code&gt; column to datetime type in Python.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Find Rank of Homes Sold for Each Seller by Close Date&lt;/h4&gt;
&lt;p&gt;I want to know the rank of each house sale &lt;em&gt;by person ordered by time&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Based on looking at the table above, Julia sold her first, second and third house on August 1st. On August 3rd, Julia sold her fourth house. &lt;/p&gt;
&lt;p&gt;For the &lt;code&gt;df&lt;/code&gt; dataframe, I want to create a new column that shows the numerical rank values for each person's home sales by day. To do this, I group by the &lt;code&gt;seller_name&lt;/code&gt; column, and apply the &lt;code&gt;rank()&lt;/code&gt; method to the &lt;code&gt;close_date&lt;/code&gt; colummn. I set the &lt;code&gt;rank()&lt;/code&gt; argument &lt;code&gt;methond='first'&lt;/code&gt; to rank the sales of houses per person, ordered by date, in the order they appear. The new column with rank values is called &lt;code&gt;rank_seller_by_close_date&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;method='first'&lt;/code&gt; for the &lt;code&gt;rank()&lt;/code&gt; method for pandas series is equivalent to the &lt;code&gt;ROW_NUMBER()&lt;/code&gt; window function in SQL.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rank_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seller_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below I output &lt;code&gt;df&lt;/code&gt; and highlight the &lt;code&gt;rank_seller_by_close_date&lt;/code&gt; with shades of green designated by numerical value. The higher the rank value, the darker the green highlighted background. &lt;code&gt;df&lt;/code&gt; is ordered by &lt;code&gt;close_date&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;background_gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IndexSlice&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rank_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;style  type="text/css" &gt;
    #T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow0_col2 {
            background-color:  #e9fce9;
        }    #T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow1_col2 {
            background-color:  #e9fce9;
        }    #T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow2_col2 {
            background-color:  #d3f8d3;
        }    #T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow3_col2 {
            background-color:  #e9fce9;
        }    #T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow4_col2 {
            background-color:  #bcf5bc;
        }    #T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow5_col2 {
            background-color:  #d3f8d3;
        }    #T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow6_col2 {
            background-color:  #a6f1a6;
        }    #T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow7_col2 {
            background-color:  #90ee90;
        }&lt;/style&gt;

&lt;p&gt;&lt;table id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5f" &gt; 
&lt;thead&gt;    &lt;tr&gt; 
        &lt;th class="blank level0" &gt;&lt;/th&gt; 
        &lt;th class="col_heading level0 col0" &gt;close_date&lt;/th&gt; 
        &lt;th class="col_heading level0 col1" &gt;seller_name&lt;/th&gt; 
        &lt;th class="col_heading level0 col2" &gt;rank_seller_by_close_date&lt;/th&gt; 
    &lt;/tr&gt;&lt;/thead&gt; 
&lt;tbody&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5flevel0_row0" class="row_heading level0 row0" &gt;0&lt;/th&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow0_col0" class="data row0 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow0_col1" class="data row0 col1" &gt;Lara&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow0_col2" class="data row0 col2" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5flevel0_row1" class="row_heading level0 row1" &gt;1&lt;/th&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow1_col0" class="data row1 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow1_col1" class="data row1 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow1_col2" class="data row1 col2" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5flevel0_row2" class="row_heading level0 row2" &gt;2&lt;/th&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow2_col0" class="data row2 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow2_col1" class="data row2 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow2_col2" class="data row2 col2" &gt;2&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5flevel0_row3" class="row_heading level0 row3" &gt;3&lt;/th&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow3_col0" class="data row3 col0" &gt;2012-08-02 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow3_col1" class="data row3 col1" &gt;Emily&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow3_col2" class="data row3 col2" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5flevel0_row4" class="row_heading level0 row4" &gt;4&lt;/th&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow4_col0" class="data row4 col0" &gt;2012-08-03 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow4_col1" class="data row4 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow4_col2" class="data row4 col2" &gt;3&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5flevel0_row5" class="row_heading level0 row5" &gt;5&lt;/th&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow5_col0" class="data row5 col0" &gt;2012-08-04 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow5_col1" class="data row5 col1" &gt;Lara&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow5_col2" class="data row5 col2" &gt;2&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5flevel0_row6" class="row_heading level0 row6" &gt;6&lt;/th&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow6_col0" class="data row6 col0" &gt;2012-08-05 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow6_col1" class="data row6 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow6_col2" class="data row6 col2" &gt;4&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5flevel0_row7" class="row_heading level0 row7" &gt;7&lt;/th&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow7_col0" class="data row7 col0" &gt;2012-08-07 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow7_col1" class="data row7 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bbf37b36_5f9a_11e9_b74c_784f4368ca5frow7_col2" class="data row7 col2" &gt;5&lt;/td&gt; 
    &lt;/tr&gt;&lt;/tbody&gt; 
&lt;/table&gt; &lt;/p&gt;
&lt;p&gt;It's difficult to easily see the order of ranks for each seller by date. Below, I output &lt;code&gt;df&lt;/code&gt; sorted by &lt;code&gt;seller_name&lt;/code&gt; and then &lt;code&gt;rank_seller_by_close_date&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Much better! It's clear Julia's home sales are ranked by from oldest to newest. Even though she made two homes sales on August 1st, one is given a rank value of &lt;code&gt;1&lt;/code&gt; and then next &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seller_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rank_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;background_gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IndexSlice&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rank_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;style  type="text/css" &gt;
    #T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow0_col2 {
            background-color:  #e9fce9;
        }    #T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow1_col2 {
            background-color:  #e9fce9;
        }    #T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow2_col2 {
            background-color:  #d3f8d3;
        }    #T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow3_col2 {
            background-color:  #bcf5bc;
        }    #T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow4_col2 {
            background-color:  #a6f1a6;
        }    #T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow5_col2 {
            background-color:  #90ee90;
        }    #T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow6_col2 {
            background-color:  #e9fce9;
        }    #T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow7_col2 {
            background-color:  #d3f8d3;
        }&lt;/style&gt;

&lt;p&gt;&lt;table id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5f" &gt; 
&lt;thead&gt;    &lt;tr&gt; 
        &lt;th class="blank level0" &gt;&lt;/th&gt; 
        &lt;th class="col_heading level0 col0" &gt;close_date&lt;/th&gt; 
        &lt;th class="col_heading level0 col1" &gt;seller_name&lt;/th&gt; 
        &lt;th class="col_heading level0 col2" &gt;rank_seller_by_close_date&lt;/th&gt; 
    &lt;/tr&gt;&lt;/thead&gt; 
&lt;tbody&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5flevel0_row0" class="row_heading level0 row0" &gt;3&lt;/th&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow0_col0" class="data row0 col0" &gt;2012-08-02 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow0_col1" class="data row0 col1" &gt;Emily&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow0_col2" class="data row0 col2" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5flevel0_row1" class="row_heading level0 row1" &gt;1&lt;/th&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow1_col0" class="data row1 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow1_col1" class="data row1 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow1_col2" class="data row1 col2" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5flevel0_row2" class="row_heading level0 row2" &gt;2&lt;/th&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow2_col0" class="data row2 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow2_col1" class="data row2 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow2_col2" class="data row2 col2" &gt;2&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5flevel0_row3" class="row_heading level0 row3" &gt;4&lt;/th&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow3_col0" class="data row3 col0" &gt;2012-08-03 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow3_col1" class="data row3 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow3_col2" class="data row3 col2" &gt;3&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5flevel0_row4" class="row_heading level0 row4" &gt;6&lt;/th&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow4_col0" class="data row4 col0" &gt;2012-08-05 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow4_col1" class="data row4 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow4_col2" class="data row4 col2" &gt;4&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5flevel0_row5" class="row_heading level0 row5" &gt;7&lt;/th&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow5_col0" class="data row5 col0" &gt;2012-08-07 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow5_col1" class="data row5 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow5_col2" class="data row5 col2" &gt;5&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5flevel0_row6" class="row_heading level0 row6" &gt;0&lt;/th&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow6_col0" class="data row6 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow6_col1" class="data row6 col1" &gt;Lara&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow6_col2" class="data row6 col2" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5flevel0_row7" class="row_heading level0 row7" &gt;5&lt;/th&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow7_col0" class="data row7 col0" &gt;2012-08-04 00:00:00&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow7_col1" class="data row7 col1" &gt;Lara&lt;/td&gt; 
        &lt;td id="T_bbf63f9c_5f9a_11e9_a976_784f4368ca5frow7_col2" class="data row7 col2" &gt;2&lt;/td&gt; 
    &lt;/tr&gt;&lt;/tbody&gt; 
&lt;/table&gt; &lt;/p&gt;
&lt;h4&gt;Find Count of New Sellers Per Seller Per Day&lt;/h4&gt;
&lt;p&gt;I can utilize the rankings above to find the count of new sellers by day. &lt;/p&gt;
&lt;p&gt;For example, Julia is a &lt;em&gt;new&lt;/em&gt; home seller on August 1st because she has a rank of &lt;code&gt;1&lt;/code&gt; that day. Julia would &lt;em&gt;not&lt;/em&gt; be counted as a &lt;em&gt;new&lt;/em&gt; home seller on August 3rd because she has a rank of &lt;code&gt;3&lt;/code&gt; that day. &lt;/p&gt;
&lt;p&gt;I can filter &lt;code&gt;df&lt;/code&gt; by record in which &lt;code&gt;rank_seller_by_close_date&lt;/code&gt; is equal to &lt;code&gt;1&lt;/code&gt;. The three records for Lara, Julia and Emily show the &lt;code&gt;close_date&lt;/code&gt; for each in which they sold their first home.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rank_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;close_date&lt;/th&gt;
      &lt;th&gt;seller_name&lt;/th&gt;
      &lt;th&gt;rank_seller_by_close_date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Lara&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2012-08-02&lt;/td&gt;
      &lt;td&gt;Emily&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Let's take the table above and group by &lt;code&gt;close_date&lt;/code&gt; to find the count of &lt;code&gt;close_date&lt;/code&gt; observations. Below is the output.&lt;/p&gt;
&lt;p&gt;Similar to above, on &lt;code&gt;2012-08-01&lt;/code&gt;, we can see &lt;code&gt;2&lt;/code&gt; new sellers representing Lara and Julia. On &lt;code&gt;2012-08-02&lt;/code&gt;, we can see &lt;code&gt;1&lt;/code&gt; new seller representing Emily.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rank_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;count_new_sellers_of_homes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;close_date&lt;/th&gt;
      &lt;th&gt;count_new_sellers_of_homes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2012-08-02&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;Example 2: Count of New Sellers By Agency Per Day&lt;/h3&gt;
&lt;p&gt;In example 1, I wanted the count of new sellers by day. In this example 2, I want the count of sellers by agency per day.&lt;/p&gt;
&lt;p&gt;Below, I add a new column called &lt;code&gt;agency&lt;/code&gt; that goes for each home sale.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;agency&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fifer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fifer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fifer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HomeSales&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HomeSales&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fifer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fifer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fifer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below I print the output of &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;close_date&lt;/th&gt;
      &lt;th&gt;seller_name&lt;/th&gt;
      &lt;th&gt;rank_seller_by_close_date&lt;/th&gt;
      &lt;th&gt;agency&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Lara&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;Fifer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;Fifer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;Fifer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2012-08-02&lt;/td&gt;
      &lt;td&gt;Emily&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;HomeSales&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2012-08-03&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;HomeSales&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2012-08-04&lt;/td&gt;
      &lt;td&gt;Lara&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;Fifer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;2012-08-05&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;Fifer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;2012-08-07&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;Fifer&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I want to create the rank value of home sales by agency per seller ordered by close date. This is valuable so each agency can understand the count of new sellers per day. &lt;/p&gt;
&lt;p&gt;Below, I group by two fields, &lt;code&gt;agency&lt;/code&gt; and then &lt;code&gt;seller_name&lt;/code&gt; and find a rank value ordered by &lt;code&gt;close_date&lt;/code&gt;. I store these rank values in a new column called &lt;code&gt;first_rank_agency_seller_by_close_date&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_rank_agency_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;agency&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;seller_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below I output &lt;code&gt;df&lt;/code&gt; and highlight the important column &lt;code&gt;first_rank_agency_seller_by_close_date&lt;/code&gt;. The order of ranks below is a bit confusing. I'll re-order records after below's output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;background_gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IndexSlice&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_rank_agency_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;style  type="text/css" &gt;
    #T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow0_col4 {
            background-color:  #e9fce9;
        }    #T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow1_col4 {
            background-color:  #e9fce9;
        }    #T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow2_col4 {
            background-color:  #cbf7cb;
        }    #T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow3_col4 {
            background-color:  #e9fce9;
        }    #T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow4_col4 {
            background-color:  #e9fce9;
        }    #T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow5_col4 {
            background-color:  #cbf7cb;
        }    #T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow6_col4 {
            background-color:  #aef3ae;
        }    #T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow7_col4 {
            background-color:  #90ee90;
        }&lt;/style&gt;

&lt;p&gt;&lt;table id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5f" &gt; 
&lt;thead&gt;    &lt;tr&gt; 
        &lt;th class="blank level0" &gt;&lt;/th&gt; 
        &lt;th class="col_heading level0 col0" &gt;close_date&lt;/th&gt; 
        &lt;th class="col_heading level0 col1" &gt;seller_name&lt;/th&gt; 
        &lt;th class="col_heading level0 col2" &gt;rank_seller_by_close_date&lt;/th&gt; 
        &lt;th class="col_heading level0 col3" &gt;agency&lt;/th&gt; 
        &lt;th class="col_heading level0 col4" &gt;first_rank_agency_seller_by_close_date&lt;/th&gt; 
    &lt;/tr&gt;&lt;/thead&gt; 
&lt;tbody&gt;    &lt;tr&gt; 
        &lt;th id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5flevel0_row0" class="row_heading level0 row0" &gt;0&lt;/th&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow0_col0" class="data row0 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow0_col1" class="data row0 col1" &gt;Lara&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow0_col2" class="data row0 col2" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow0_col3" class="data row0 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow0_col4" class="data row0 col4" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5flevel0_row1" class="row_heading level0 row1" &gt;1&lt;/th&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow1_col0" class="data row1 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow1_col1" class="data row1 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow1_col2" class="data row1 col2" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow1_col3" class="data row1 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow1_col4" class="data row1 col4" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5flevel0_row2" class="row_heading level0 row2" &gt;2&lt;/th&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow2_col0" class="data row2 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow2_col1" class="data row2 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow2_col2" class="data row2 col2" &gt;2&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow2_col3" class="data row2 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow2_col4" class="data row2 col4" &gt;2&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5flevel0_row3" class="row_heading level0 row3" &gt;3&lt;/th&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow3_col0" class="data row3 col0" &gt;2012-08-02 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow3_col1" class="data row3 col1" &gt;Emily&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow3_col2" class="data row3 col2" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow3_col3" class="data row3 col3" &gt;HomeSales&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow3_col4" class="data row3 col4" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5flevel0_row4" class="row_heading level0 row4" &gt;4&lt;/th&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow4_col0" class="data row4 col0" &gt;2012-08-03 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow4_col1" class="data row4 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow4_col2" class="data row4 col2" &gt;3&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow4_col3" class="data row4 col3" &gt;HomeSales&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow4_col4" class="data row4 col4" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5flevel0_row5" class="row_heading level0 row5" &gt;5&lt;/th&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow5_col0" class="data row5 col0" &gt;2012-08-04 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow5_col1" class="data row5 col1" &gt;Lara&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow5_col2" class="data row5 col2" &gt;2&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow5_col3" class="data row5 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow5_col4" class="data row5 col4" &gt;2&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5flevel0_row6" class="row_heading level0 row6" &gt;6&lt;/th&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow6_col0" class="data row6 col0" &gt;2012-08-05 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow6_col1" class="data row6 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow6_col2" class="data row6 col2" &gt;4&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow6_col3" class="data row6 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow6_col4" class="data row6 col4" &gt;3&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5flevel0_row7" class="row_heading level0 row7" &gt;7&lt;/th&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow7_col0" class="data row7 col0" &gt;2012-08-07 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow7_col1" class="data row7 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow7_col2" class="data row7 col2" &gt;5&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow7_col3" class="data row7 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc001bf4_5f9a_11e9_a1fb_784f4368ca5frow7_col4" class="data row7 col4" &gt;4&lt;/td&gt; 
    &lt;/tr&gt;&lt;/tbody&gt; 
&lt;/table&gt; &lt;/p&gt;
&lt;p&gt;The output below is easier to understand because I sort &lt;code&gt;df&lt;/code&gt; by &lt;code&gt;agency&lt;/code&gt; and then &lt;code&gt;seller_name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below, notice how &lt;code&gt;Fifer&lt;/code&gt; &lt;em&gt;first&lt;/em&gt; helped Julia sell a home on &lt;code&gt;2012-08-01&lt;/code&gt; and first helped Lara sell a home on &lt;code&gt;2012-08-01&lt;/code&gt;. Both of these rows have a &lt;code&gt;first_rank_agency_seller_by_close_date&lt;/code&gt; value of &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, when Julia sold a home with &lt;code&gt;HomeSales&lt;/code&gt; on &lt;code&gt;2012-08-03&lt;/code&gt;, that also has a &lt;code&gt;first_rank_agency_seller_by_close_date&lt;/code&gt; value of &lt;code&gt;1&lt;/code&gt; because that was her &lt;em&gt;first&lt;/em&gt; home sold by date with that agency, &lt;code&gt;HomeSales&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;agency&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;seller_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;background_gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IndexSlice&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_rank_agency_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;style  type="text/css" &gt;
    #T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow0_col4 {
            background-color:  #e9fce9;
        }    #T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow1_col4 {
            background-color:  #cbf7cb;
        }    #T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow2_col4 {
            background-color:  #aef3ae;
        }    #T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow3_col4 {
            background-color:  #90ee90;
        }    #T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow4_col4 {
            background-color:  #e9fce9;
        }    #T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow5_col4 {
            background-color:  #cbf7cb;
        }    #T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow6_col4 {
            background-color:  #e9fce9;
        }    #T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow7_col4 {
            background-color:  #e9fce9;
        }&lt;/style&gt;

&lt;p&gt;&lt;table id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5f" &gt; 
&lt;thead&gt;    &lt;tr&gt; 
        &lt;th class="blank level0" &gt;&lt;/th&gt; 
        &lt;th class="col_heading level0 col0" &gt;close_date&lt;/th&gt; 
        &lt;th class="col_heading level0 col1" &gt;seller_name&lt;/th&gt; 
        &lt;th class="col_heading level0 col2" &gt;rank_seller_by_close_date&lt;/th&gt; 
        &lt;th class="col_heading level0 col3" &gt;agency&lt;/th&gt; 
        &lt;th class="col_heading level0 col4" &gt;first_rank_agency_seller_by_close_date&lt;/th&gt; 
    &lt;/tr&gt;&lt;/thead&gt; 
&lt;tbody&gt;    &lt;tr&gt; 
        &lt;th id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5flevel0_row0" class="row_heading level0 row0" &gt;1&lt;/th&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow0_col0" class="data row0 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow0_col1" class="data row0 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow0_col2" class="data row0 col2" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow0_col3" class="data row0 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow0_col4" class="data row0 col4" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5flevel0_row1" class="row_heading level0 row1" &gt;2&lt;/th&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow1_col0" class="data row1 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow1_col1" class="data row1 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow1_col2" class="data row1 col2" &gt;2&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow1_col3" class="data row1 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow1_col4" class="data row1 col4" &gt;2&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5flevel0_row2" class="row_heading level0 row2" &gt;6&lt;/th&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow2_col0" class="data row2 col0" &gt;2012-08-05 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow2_col1" class="data row2 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow2_col2" class="data row2 col2" &gt;4&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow2_col3" class="data row2 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow2_col4" class="data row2 col4" &gt;3&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5flevel0_row3" class="row_heading level0 row3" &gt;7&lt;/th&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow3_col0" class="data row3 col0" &gt;2012-08-07 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow3_col1" class="data row3 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow3_col2" class="data row3 col2" &gt;5&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow3_col3" class="data row3 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow3_col4" class="data row3 col4" &gt;4&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5flevel0_row4" class="row_heading level0 row4" &gt;0&lt;/th&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow4_col0" class="data row4 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow4_col1" class="data row4 col1" &gt;Lara&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow4_col2" class="data row4 col2" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow4_col3" class="data row4 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow4_col4" class="data row4 col4" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5flevel0_row5" class="row_heading level0 row5" &gt;5&lt;/th&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow5_col0" class="data row5 col0" &gt;2012-08-04 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow5_col1" class="data row5 col1" &gt;Lara&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow5_col2" class="data row5 col2" &gt;2&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow5_col3" class="data row5 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow5_col4" class="data row5 col4" &gt;2&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5flevel0_row6" class="row_heading level0 row6" &gt;3&lt;/th&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow6_col0" class="data row6 col0" &gt;2012-08-02 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow6_col1" class="data row6 col1" &gt;Emily&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow6_col2" class="data row6 col2" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow6_col3" class="data row6 col3" &gt;HomeSales&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow6_col4" class="data row6 col4" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5flevel0_row7" class="row_heading level0 row7" &gt;4&lt;/th&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow7_col0" class="data row7 col0" &gt;2012-08-03 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow7_col1" class="data row7 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow7_col2" class="data row7 col2" &gt;3&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow7_col3" class="data row7 col3" &gt;HomeSales&lt;/td&gt; 
        &lt;td id="T_bc034d68_5f9a_11e9_b74b_784f4368ca5frow7_col4" class="data row7 col4" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;&lt;/tbody&gt; 
&lt;/table&gt; &lt;/p&gt;
&lt;p&gt;I still want the count of &lt;em&gt;new&lt;/em&gt; sellers with each agency per day. Below is a filter of &lt;code&gt;df&lt;/code&gt; for records in which &lt;code&gt;first_rank_agency_seller_by_close_date&lt;/code&gt; equals &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_rank_agency_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;close_date&lt;/th&gt;
      &lt;th&gt;seller_name&lt;/th&gt;
      &lt;th&gt;rank_seller_by_close_date&lt;/th&gt;
      &lt;th&gt;agency&lt;/th&gt;
      &lt;th&gt;first_rank_agency_seller_by_close_date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Lara&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;Fifer&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;Fifer&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2012-08-02&lt;/td&gt;
      &lt;td&gt;Emily&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;HomeSales&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2012-08-03&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;HomeSales&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;To get the final final output a count of new sellers with each agency per day, I take the filtered dataframe from above, group by &lt;code&gt;agency&lt;/code&gt; and then &lt;code&gt;close_date&lt;/code&gt;, and then compute the group size. &lt;/p&gt;
&lt;p&gt;Above I see two records of homes sold on &lt;code&gt;2012-08-01&lt;/code&gt; by Lara and Julia with the agency &lt;code&gt;Fifer&lt;/code&gt;. In the output from the group by operation below, I see an equivalent first record for &lt;code&gt;Fifer&lt;/code&gt; on &lt;code&gt;2012-08-01&lt;/code&gt; with &lt;code&gt;count_new_sellers_of_homes&lt;/code&gt; equal to &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_rank_agency_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;agency&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;count_new_sellers_of_homes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;agency&lt;/th&gt;
      &lt;th&gt;close_date&lt;/th&gt;
      &lt;th&gt;count_new_sellers_of_homes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Fifer&lt;/td&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;HomeSales&lt;/td&gt;
      &lt;td&gt;2012-08-02&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;HomeSales&lt;/td&gt;
      &lt;td&gt;2012-08-03&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;Example 3: Pandas Rank &lt;code&gt;method='min'&lt;/code&gt; Comparison&lt;/h3&gt;
&lt;p&gt;The pandas &lt;code&gt;rank()&lt;/code&gt; method has an argument &lt;code&gt;method&lt;/code&gt; that can be set to &lt;code&gt;min&lt;/code&gt;. This is different than the method used above with &lt;code&gt;method&lt;/code&gt; set to &lt;code&gt;first&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;method='min'&lt;/code&gt; argument for the &lt;code&gt;rank()&lt;/code&gt; method for pandas series is equivalent to the &lt;code&gt;RANK()&lt;/code&gt; window function in SQL.&lt;/p&gt;
&lt;p&gt;Notice how with &lt;code&gt;method='min'&lt;/code&gt;, in the column &lt;code&gt;min_rank_agency_seller_by_close_date&lt;/code&gt;, Julia's two home sales on August 1, 2012 are both given a tied rank of 1. &lt;/p&gt;
&lt;p&gt;Then, the min rank value &lt;em&gt;skips&lt;/em&gt; a value of &lt;code&gt;2&lt;/code&gt; and Julia's next sale on August 5, 2012 has a value of &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;min_rank_agency_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;agency&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;seller_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;min&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;agency&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;seller_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;background_gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IndexSlice&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;min_rank_agency_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;style  type="text/css" &gt;
    #T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow0_col5 {
            background-color:  #e9fce9;
        }    #T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow1_col5 {
            background-color:  #e9fce9;
        }    #T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow2_col5 {
            background-color:  #aef3ae;
        }    #T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow3_col5 {
            background-color:  #90ee90;
        }    #T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow4_col5 {
            background-color:  #e9fce9;
        }    #T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow5_col5 {
            background-color:  #cbf7cb;
        }    #T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow6_col5 {
            background-color:  #e9fce9;
        }    #T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow7_col5 {
            background-color:  #e9fce9;
        }&lt;/style&gt;

&lt;p&gt;&lt;table id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5f" &gt; 
&lt;thead&gt;    &lt;tr&gt; 
        &lt;th class="blank level0" &gt;&lt;/th&gt; 
        &lt;th class="col_heading level0 col0" &gt;close_date&lt;/th&gt; 
        &lt;th class="col_heading level0 col1" &gt;seller_name&lt;/th&gt; 
        &lt;th class="col_heading level0 col2" &gt;rank_seller_by_close_date&lt;/th&gt; 
        &lt;th class="col_heading level0 col3" &gt;agency&lt;/th&gt; 
        &lt;th class="col_heading level0 col4" &gt;first_rank_agency_seller_by_close_date&lt;/th&gt; 
        &lt;th class="col_heading level0 col5" &gt;min_rank_agency_seller_by_close_date&lt;/th&gt; 
    &lt;/tr&gt;&lt;/thead&gt; 
&lt;tbody&gt;    &lt;tr&gt; 
        &lt;th id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5flevel0_row0" class="row_heading level0 row0" &gt;1&lt;/th&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow0_col0" class="data row0 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow0_col1" class="data row0 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow0_col2" class="data row0 col2" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow0_col3" class="data row0 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow0_col4" class="data row0 col4" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow0_col5" class="data row0 col5" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5flevel0_row1" class="row_heading level0 row1" &gt;2&lt;/th&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow1_col0" class="data row1 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow1_col1" class="data row1 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow1_col2" class="data row1 col2" &gt;2&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow1_col3" class="data row1 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow1_col4" class="data row1 col4" &gt;2&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow1_col5" class="data row1 col5" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5flevel0_row2" class="row_heading level0 row2" &gt;6&lt;/th&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow2_col0" class="data row2 col0" &gt;2012-08-05 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow2_col1" class="data row2 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow2_col2" class="data row2 col2" &gt;4&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow2_col3" class="data row2 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow2_col4" class="data row2 col4" &gt;3&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow2_col5" class="data row2 col5" &gt;3&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5flevel0_row3" class="row_heading level0 row3" &gt;7&lt;/th&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow3_col0" class="data row3 col0" &gt;2012-08-07 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow3_col1" class="data row3 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow3_col2" class="data row3 col2" &gt;5&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow3_col3" class="data row3 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow3_col4" class="data row3 col4" &gt;4&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow3_col5" class="data row3 col5" &gt;4&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5flevel0_row4" class="row_heading level0 row4" &gt;0&lt;/th&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow4_col0" class="data row4 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow4_col1" class="data row4 col1" &gt;Lara&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow4_col2" class="data row4 col2" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow4_col3" class="data row4 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow4_col4" class="data row4 col4" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow4_col5" class="data row4 col5" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5flevel0_row5" class="row_heading level0 row5" &gt;5&lt;/th&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow5_col0" class="data row5 col0" &gt;2012-08-04 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow5_col1" class="data row5 col1" &gt;Lara&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow5_col2" class="data row5 col2" &gt;2&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow5_col3" class="data row5 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow5_col4" class="data row5 col4" &gt;2&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow5_col5" class="data row5 col5" &gt;2&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5flevel0_row6" class="row_heading level0 row6" &gt;3&lt;/th&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow6_col0" class="data row6 col0" &gt;2012-08-02 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow6_col1" class="data row6 col1" &gt;Emily&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow6_col2" class="data row6 col2" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow6_col3" class="data row6 col3" &gt;HomeSales&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow6_col4" class="data row6 col4" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow6_col5" class="data row6 col5" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5flevel0_row7" class="row_heading level0 row7" &gt;4&lt;/th&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow7_col0" class="data row7 col0" &gt;2012-08-03 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow7_col1" class="data row7 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow7_col2" class="data row7 col2" &gt;3&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow7_col3" class="data row7 col3" &gt;HomeSales&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow7_col4" class="data row7 col4" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc0d943a_5f9a_11e9_be80_784f4368ca5frow7_col5" class="data row7 col5" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;&lt;/tbody&gt; 
&lt;/table&gt; &lt;/p&gt;
&lt;p&gt;The use case for &lt;code&gt;method='first'&lt;/code&gt; versus &lt;code&gt;method='min'&lt;/code&gt; varies on a case by case basis. It's important to understand your data well to make sure you utilize the correct one, though you can of course easily swap the argument's value.&lt;/p&gt;
&lt;h3&gt;Example 4: Pandas Rank &lt;code&gt;method='dense'&lt;/code&gt; Comparison&lt;/h3&gt;
&lt;p&gt;The pandas &lt;code&gt;rank()&lt;/code&gt; method has an argument &lt;code&gt;method&lt;/code&gt; that can be set to &lt;code&gt;'dense'&lt;/code&gt;. This is different than &lt;code&gt;method&lt;/code&gt; set to either &lt;code&gt;'first'&lt;/code&gt; or &lt;code&gt;'min'&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Notice how with &lt;code&gt;method='dense'&lt;/code&gt;, in the column &lt;code&gt;dense_rank_agency_seller_by_close_date&lt;/code&gt;, Julia's two home sales on August 1, 2012 are both given a tied rank of &lt;code&gt;1&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Then, the dense rank value &lt;em&gt;does not skip&lt;/em&gt; a value of &lt;code&gt;2&lt;/code&gt; and Julia's next sale on August 5, 2012 has a value of &lt;code&gt;2&lt;/code&gt;. &lt;code&gt;'dense'&lt;/code&gt; is different than &lt;code&gt;min&lt;/code&gt;! &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dense_rank_agency_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;agency&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;seller_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dense&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;agency&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;seller_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;background_gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IndexSlice&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dense_rank_agency_seller_by_close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;style  type="text/css" &gt;
    #T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow0_col6 {
            background-color:  #e9fce9;
        }    #T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow1_col6 {
            background-color:  #e9fce9;
        }    #T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow2_col6 {
            background-color:  #bcf5bc;
        }    #T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow3_col6 {
            background-color:  #90ee90;
        }    #T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow4_col6 {
            background-color:  #e9fce9;
        }    #T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow5_col6 {
            background-color:  #bcf5bc;
        }    #T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow6_col6 {
            background-color:  #e9fce9;
        }    #T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow7_col6 {
            background-color:  #e9fce9;
        }&lt;/style&gt;

&lt;p&gt;&lt;table id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5f" &gt; 
&lt;thead&gt;    &lt;tr&gt; 
        &lt;th class="blank level0" &gt;&lt;/th&gt; 
        &lt;th class="col_heading level0 col0" &gt;close_date&lt;/th&gt; 
        &lt;th class="col_heading level0 col1" &gt;seller_name&lt;/th&gt; 
        &lt;th class="col_heading level0 col2" &gt;rank_seller_by_close_date&lt;/th&gt; 
        &lt;th class="col_heading level0 col3" &gt;agency&lt;/th&gt; 
        &lt;th class="col_heading level0 col4" &gt;first_rank_agency_seller_by_close_date&lt;/th&gt; 
        &lt;th class="col_heading level0 col5" &gt;min_rank_agency_seller_by_close_date&lt;/th&gt; 
        &lt;th class="col_heading level0 col6" &gt;dense_rank_agency_seller_by_close_date&lt;/th&gt; 
    &lt;/tr&gt;&lt;/thead&gt; 
&lt;tbody&gt;    &lt;tr&gt; 
        &lt;th id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5flevel0_row0" class="row_heading level0 row0" &gt;1&lt;/th&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow0_col0" class="data row0 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow0_col1" class="data row0 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow0_col2" class="data row0 col2" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow0_col3" class="data row0 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow0_col4" class="data row0 col4" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow0_col5" class="data row0 col5" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow0_col6" class="data row0 col6" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5flevel0_row1" class="row_heading level0 row1" &gt;2&lt;/th&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow1_col0" class="data row1 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow1_col1" class="data row1 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow1_col2" class="data row1 col2" &gt;2&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow1_col3" class="data row1 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow1_col4" class="data row1 col4" &gt;2&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow1_col5" class="data row1 col5" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow1_col6" class="data row1 col6" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5flevel0_row2" class="row_heading level0 row2" &gt;6&lt;/th&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow2_col0" class="data row2 col0" &gt;2012-08-05 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow2_col1" class="data row2 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow2_col2" class="data row2 col2" &gt;4&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow2_col3" class="data row2 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow2_col4" class="data row2 col4" &gt;3&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow2_col5" class="data row2 col5" &gt;3&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow2_col6" class="data row2 col6" &gt;2&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5flevel0_row3" class="row_heading level0 row3" &gt;7&lt;/th&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow3_col0" class="data row3 col0" &gt;2012-08-07 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow3_col1" class="data row3 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow3_col2" class="data row3 col2" &gt;5&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow3_col3" class="data row3 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow3_col4" class="data row3 col4" &gt;4&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow3_col5" class="data row3 col5" &gt;4&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow3_col6" class="data row3 col6" &gt;3&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5flevel0_row4" class="row_heading level0 row4" &gt;0&lt;/th&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow4_col0" class="data row4 col0" &gt;2012-08-01 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow4_col1" class="data row4 col1" &gt;Lara&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow4_col2" class="data row4 col2" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow4_col3" class="data row4 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow4_col4" class="data row4 col4" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow4_col5" class="data row4 col5" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow4_col6" class="data row4 col6" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5flevel0_row5" class="row_heading level0 row5" &gt;5&lt;/th&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow5_col0" class="data row5 col0" &gt;2012-08-04 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow5_col1" class="data row5 col1" &gt;Lara&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow5_col2" class="data row5 col2" &gt;2&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow5_col3" class="data row5 col3" &gt;Fifer&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow5_col4" class="data row5 col4" &gt;2&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow5_col5" class="data row5 col5" &gt;2&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow5_col6" class="data row5 col6" &gt;2&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5flevel0_row6" class="row_heading level0 row6" &gt;3&lt;/th&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow6_col0" class="data row6 col0" &gt;2012-08-02 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow6_col1" class="data row6 col1" &gt;Emily&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow6_col2" class="data row6 col2" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow6_col3" class="data row6 col3" &gt;HomeSales&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow6_col4" class="data row6 col4" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow6_col5" class="data row6 col5" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow6_col6" class="data row6 col6" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;    &lt;tr&gt; 
        &lt;th id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5flevel0_row7" class="row_heading level0 row7" &gt;4&lt;/th&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow7_col0" class="data row7 col0" &gt;2012-08-03 00:00:00&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow7_col1" class="data row7 col1" &gt;Julia&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow7_col2" class="data row7 col2" &gt;3&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow7_col3" class="data row7 col3" &gt;HomeSales&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow7_col4" class="data row7 col4" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow7_col5" class="data row7 col5" &gt;1&lt;/td&gt; 
        &lt;td id="T_bc12cfb8_5f9a_11e9_87b4_784f4368ca5frow7_col6" class="data row7 col6" &gt;1&lt;/td&gt; 
    &lt;/tr&gt;&lt;/tbody&gt; 
&lt;/table&gt; &lt;/p&gt;
&lt;p&gt;The use case for &lt;code&gt;'dense'&lt;/code&gt; varies on a case by case basis. A second reminder - please understand your data well and why you'd choose &lt;code&gt;'dense'&lt;/code&gt; over other options.&lt;/p&gt;
&lt;h3&gt;Example 5: Pandas Rank &lt;code&gt;pct=True&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The pandas series &lt;code&gt;rank()&lt;/code&gt; method has another argument called &lt;code&gt;pct&lt;/code&gt; that can be set to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. By default, it's &lt;code&gt;False&lt;/code&gt;. This &lt;code&gt;pct&lt;/code&gt; argument computes the percentage rank of data.&lt;/p&gt;
&lt;p&gt;To set the argument &lt;code&gt;pct=True&lt;/code&gt; is similar to the &lt;code&gt;NTILE(100)&lt;/code&gt; window function in SQL.&lt;/p&gt;
&lt;h4&gt;Create Class Quiz Score Data&lt;/h4&gt;
&lt;p&gt;Below I create fictional data for 11 students in a class that took the same quiz. The max possible score is &lt;code&gt;100&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I remember in school, teachers told me I was in a certain percentile based on my GPA or score on a quiz. Therefore, I created a dataset I'll remember in relation to percentile rankings!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;class_quiz_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Jamie&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jake&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;James&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Dan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Joy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jared&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jaime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jay&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;score&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;df_quiz_scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_quiz_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View &lt;code&gt;df_quiz_scores&lt;/code&gt; as a dataframe.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_quiz_scores&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Jamie&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Joe&lt;/td&gt;
      &lt;td&gt;85&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Jake&lt;/td&gt;
      &lt;td&gt;74&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Jill&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;James&lt;/td&gt;
      &lt;td&gt;98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Dan&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;Joy&lt;/td&gt;
      &lt;td&gt;89&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;Jared&lt;/td&gt;
      &lt;td&gt;90&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;Jill&lt;/td&gt;
      &lt;td&gt;65&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;Jaime&lt;/td&gt;
      &lt;td&gt;84&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;Jay&lt;/td&gt;
      &lt;td&gt;85&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h4&gt;Find the Percent Rank of Each Score in the Class&lt;/h4&gt;
&lt;p&gt;Below I create a new column called &lt;code&gt;score_percent_rank&lt;/code&gt; that's a ranking of scores in the &lt;code&gt;score&lt;/code&gt; column.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_quiz_scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;score_percent_rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_quiz_scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;score&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pct&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View &lt;code&gt;df_quiz_scores&lt;/code&gt; as a dataframe below. Notice how a high quiz score by Dan of &lt;code&gt;91&lt;/code&gt; has a rank value of &lt;code&gt;0.81&lt;/code&gt;. I think of this as the 81st percentile. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_quiz_scores&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;score&lt;/th&gt;
      &lt;th&gt;score_percent_rank&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Jamie&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;0.272727&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Joe&lt;/td&gt;
      &lt;td&gt;85&lt;/td&gt;
      &lt;td&gt;0.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Jake&lt;/td&gt;
      &lt;td&gt;74&lt;/td&gt;
      &lt;td&gt;0.181818&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Jill&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;James&lt;/td&gt;
      &lt;td&gt;98&lt;/td&gt;
      &lt;td&gt;0.909091&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Dan&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
      &lt;td&gt;0.818182&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;Joy&lt;/td&gt;
      &lt;td&gt;89&lt;/td&gt;
      &lt;td&gt;0.636364&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;Jared&lt;/td&gt;
      &lt;td&gt;90&lt;/td&gt;
      &lt;td&gt;0.727273&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;Jill&lt;/td&gt;
      &lt;td&gt;65&lt;/td&gt;
      &lt;td&gt;0.090909&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;Jaime&lt;/td&gt;
      &lt;td&gt;84&lt;/td&gt;
      &lt;td&gt;0.363636&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;Jay&lt;/td&gt;
      &lt;td&gt;85&lt;/td&gt;
      &lt;td&gt;0.500000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;To make this rank easier to understand, I will multiply all these values by &lt;span class="math"&gt;\(100\)&lt;/span&gt; and round to the nearest integer value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_quiz_scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;score_percentile_rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_quiz_scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;score_percent_rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View &lt;code&gt;df_quiz_scores&lt;/code&gt; as a dataframe below. Now, Dan's &lt;code&gt;score&lt;/code&gt; of &lt;code&gt;91&lt;/code&gt; has a score &lt;code&gt;score_percentile_rank&lt;/code&gt; of &lt;code&gt;82&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_quiz_scores&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;score&lt;/th&gt;
      &lt;th&gt;score_percent_rank&lt;/th&gt;
      &lt;th&gt;score_percentile_rank&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Jamie&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;0.272727&lt;/td&gt;
      &lt;td&gt;27.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Joe&lt;/td&gt;
      &lt;td&gt;85&lt;/td&gt;
      &lt;td&gt;0.500000&lt;/td&gt;
      &lt;td&gt;50.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Jake&lt;/td&gt;
      &lt;td&gt;74&lt;/td&gt;
      &lt;td&gt;0.181818&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Jill&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;100.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;James&lt;/td&gt;
      &lt;td&gt;98&lt;/td&gt;
      &lt;td&gt;0.909091&lt;/td&gt;
      &lt;td&gt;91.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Dan&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
      &lt;td&gt;0.818182&lt;/td&gt;
      &lt;td&gt;82.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;Joy&lt;/td&gt;
      &lt;td&gt;89&lt;/td&gt;
      &lt;td&gt;0.636364&lt;/td&gt;
      &lt;td&gt;64.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;Jared&lt;/td&gt;
      &lt;td&gt;90&lt;/td&gt;
      &lt;td&gt;0.727273&lt;/td&gt;
      &lt;td&gt;73.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;Jill&lt;/td&gt;
      &lt;td&gt;65&lt;/td&gt;
      &lt;td&gt;0.090909&lt;/td&gt;
      &lt;td&gt;9.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;Jaime&lt;/td&gt;
      &lt;td&gt;84&lt;/td&gt;
      &lt;td&gt;0.363636&lt;/td&gt;
      &lt;td&gt;36.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;Jay&lt;/td&gt;
      &lt;td&gt;85&lt;/td&gt;
      &lt;td&gt;0.500000&lt;/td&gt;
      &lt;td&gt;50.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "left",
        indent = "1em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="rank"></category><category term="pandas"></category><category term="python"></category></entry><entry><title>Self Join</title><link href="https://dfrieds.com/data-analysis/self-join-python-pandas" rel="alternate"></link><published>2019-04-14T06:20:00-07:00</published><updated>2019-04-14T06:20:00-07:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2019-04-14:/data-analysis/self-join-python-pandas</id><summary type="html">&lt;p&gt;Self join a table in python and pandas&lt;/p&gt;</summary><content type="html">&lt;p&gt;In SQL, a popular type of join is a self join which joins a table to itself. This is helpful for comparing rows to one another, based on their values in columns, in a &lt;em&gt;single&lt;/em&gt; table. &lt;/p&gt;
&lt;p&gt;In this article, I'll walk through two examples in which self joins can be helpful.&lt;/p&gt;
&lt;h3&gt;Import Modules&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example 1: Basic Real Estate Transactions&lt;/h3&gt;
&lt;h4&gt;Create Dataset&lt;/h4&gt;
&lt;p&gt;I'll create a small dataset of 5 real estate transactions that include a unique transaction id for each purchase, a close date for each sale, the buyer's name and seller's name.&lt;/p&gt;
&lt;p&gt;Notice how Julia was the buyer for transaction id &lt;code&gt;1&lt;/code&gt; and later a seller for transaction id &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transaction_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
        &lt;span class="s1"&gt;&amp;#39;close_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2012-08-01&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-08-02&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-08-03&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-08-04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-08-04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
        &lt;span class="s1"&gt;&amp;#39;buyer_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Julia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Joe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jake&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jamie&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jackie&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="s1"&gt;&amp;#39;seller_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lara&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Julia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Barbara&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Emily&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mason&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View entire &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;transaction_id&lt;/th&gt;
      &lt;th&gt;close_date&lt;/th&gt;
      &lt;th&gt;buyer_name&lt;/th&gt;
      &lt;th&gt;seller_name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;Lara&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2012-08-02&lt;/td&gt;
      &lt;td&gt;Joe&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2012-08-03&lt;/td&gt;
      &lt;td&gt;Jake&lt;/td&gt;
      &lt;td&gt;Barbara&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2012-08-04&lt;/td&gt;
      &lt;td&gt;Jamie&lt;/td&gt;
      &lt;td&gt;Emily&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2012-08-04&lt;/td&gt;
      &lt;td&gt;Jackie&lt;/td&gt;
      &lt;td&gt;Mason&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h4&gt;Find People Who Were Both Buyers and Sellers&lt;/h4&gt;
&lt;p&gt;Often times, people buy homes and then later sell that homes. In this dataset, I'm curious, which people both bought and sold a home? We noticed earlier Julia bought a home and later sold one so Julia's name should be the only result.&lt;/p&gt;
&lt;p&gt;One method of finding a solution is to do a self join. In pandas, the DataFrame object has a &lt;code&gt;merge()&lt;/code&gt; method. Below, for &lt;code&gt;df&lt;/code&gt;, for the &lt;code&gt;merge&lt;/code&gt; method, I'll set the following arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;right=df&lt;/code&gt; so that the first &lt;code&gt;df&lt;/code&gt; listed in the statement merges with another DataFrame, &lt;code&gt;df&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left_on='buyer_name'&lt;/code&gt; is the column to join from the left &lt;code&gt;df&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right_on='seller_name&lt;/code&gt; is the column to join from the right &lt;code&gt;df&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By default, these arguments are also set in the &lt;code&gt;merge&lt;/code&gt; method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;how='inner'&lt;/code&gt; so returned results only show records in which the left &lt;code&gt;df&lt;/code&gt; has a value in &lt;code&gt;buyer_name&lt;/code&gt; equivalent to the right &lt;code&gt;df&lt;/code&gt; with a value of &lt;code&gt;seller_name&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;suffixes=(‘_x’, ‘_y’)&lt;/code&gt; so &lt;code&gt;_x&lt;/code&gt; is appended to the end of column names from our left &lt;code&gt;df&lt;/code&gt; if those column names originally match the right &lt;code&gt;df&lt;/code&gt;. &lt;code&gt;_y&lt;/code&gt; is appended to the end of column names from our right &lt;code&gt;df&lt;/code&gt; if those column names originally match the left &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left_on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buyer_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seller_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df2df2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left_on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buyer_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seller_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;transaction_id_x&lt;/th&gt;
      &lt;th&gt;close_date_x&lt;/th&gt;
      &lt;th&gt;buyer_name_x&lt;/th&gt;
      &lt;th&gt;seller_name_x&lt;/th&gt;
      &lt;th&gt;transaction_id_y&lt;/th&gt;
      &lt;th&gt;close_date_y&lt;/th&gt;
      &lt;th&gt;buyer_name_y&lt;/th&gt;
      &lt;th&gt;seller_name_y&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;Lara&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2012-08-02&lt;/td&gt;
      &lt;td&gt;Joe&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Our output of &lt;code&gt;df2&lt;/code&gt; shows in a single record, the details of Julia who bought a home and sold a home.&lt;/p&gt;
&lt;p&gt;We can find all unique values in the &lt;code&gt;buyer_name_x&lt;/code&gt; field to programmatically arrive at our result.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buyer_name_x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;array([&amp;#39;Julia&amp;#39;], dtype=object)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example 2: Intermediate Real Estate Transactions&lt;/h3&gt;
&lt;h4&gt;Append New Row to Dataset&lt;/h4&gt;
&lt;p&gt;Below, I create a new row for another real estate transaction in which Julia buys a 2nd home.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2012-08-05&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Julia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View new &lt;code&gt;df&lt;/code&gt; with additional row.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;transaction_id&lt;/th&gt;
      &lt;th&gt;close_date&lt;/th&gt;
      &lt;th&gt;buyer_name&lt;/th&gt;
      &lt;th&gt;seller_name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;Lara&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2012-08-02&lt;/td&gt;
      &lt;td&gt;Joe&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2012-08-03&lt;/td&gt;
      &lt;td&gt;Jake&lt;/td&gt;
      &lt;td&gt;Barbara&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2012-08-04&lt;/td&gt;
      &lt;td&gt;Jamie&lt;/td&gt;
      &lt;td&gt;Emily&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2012-08-04&lt;/td&gt;
      &lt;td&gt;Jackie&lt;/td&gt;
      &lt;td&gt;Mason&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2012-08-05&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;Mary&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h4&gt;Find People Who Are Both Buyers and Sellers&lt;/h4&gt;
&lt;p&gt;This is the same ask as with Example 1. However, our dataset is slightly different so a self join will return different results.&lt;/p&gt;
&lt;p&gt;I'll use the same code to perform a self join but assign the output to &lt;code&gt;df&lt;/code&gt; instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left_on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buyer_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seller_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;transaction_id_x&lt;/th&gt;
      &lt;th&gt;close_date_x&lt;/th&gt;
      &lt;th&gt;buyer_name_x&lt;/th&gt;
      &lt;th&gt;seller_name_x&lt;/th&gt;
      &lt;th&gt;transaction_id_y&lt;/th&gt;
      &lt;th&gt;close_date_y&lt;/th&gt;
      &lt;th&gt;buyer_name_y&lt;/th&gt;
      &lt;th&gt;seller_name_y&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2012-08-01&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;Lara&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2012-08-02&lt;/td&gt;
      &lt;td&gt;Joe&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2012-08-05&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
      &lt;td&gt;Mary&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2012-08-02&lt;/td&gt;
      &lt;td&gt;Joe&lt;/td&gt;
      &lt;td&gt;Julia&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;There are &lt;em&gt;two&lt;/em&gt; records! &lt;/p&gt;
&lt;p&gt;The first record indicates Julia's purchase for &lt;code&gt;transaction_id&lt;/code&gt; of &lt;code&gt;1&lt;/code&gt; and later a sale with &lt;code&gt;transaction_id&lt;/code&gt; of &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The second record indicates Julia's purchase for &lt;code&gt;transaction_id&lt;/code&gt; of &lt;code&gt;6&lt;/code&gt; and later a sale with &lt;code&gt;transaction_id&lt;/code&gt; of &lt;code&gt;2&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;This is the correct output as I wanted all rows of &lt;code&gt;df&lt;/code&gt; to be joined with &lt;code&gt;df&lt;/code&gt; in which a &lt;code&gt;buyer_name&lt;/code&gt; from the left &lt;code&gt;df&lt;/code&gt; is equivalent to a &lt;code&gt;seller_name&lt;/code&gt; from the right &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I can find all unique values of the &lt;code&gt;buyer_name_x&lt;/code&gt; field to programmatically arrive at our result.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buyer_name_x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;array([&amp;#39;Julia&amp;#39;], dtype=object)
&lt;/pre&gt;&lt;/div&gt;</content><category term="self join"></category><category term="pandas merge"></category><category term="python"></category><category term="pandas"></category></entry><entry><title>Create New Columns Based on Operations</title><link href="https://dfrieds.com/data-analysis/create-new-column-python-pandas" rel="alternate"></link><published>2018-12-24T16:49:00-08:00</published><updated>2018-12-24T16:49:00-08:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2018-12-24:/data-analysis/create-new-column-python-pandas</id><summary type="html">&lt;p&gt;Learn how to create new columns in a pandas DataFrame through math operations and conditionals among various columns&lt;/p&gt;</summary><content type="html">&lt;p&gt;A pivotal part of data analysis is to create new columns based on some operation. This tutorial will cover multiple ways to do that.&lt;/p&gt;
&lt;h3&gt;Import Modules&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get Tips Dataset&lt;/h3&gt;
&lt;p&gt;Let's get the &lt;code&gt;tips&lt;/code&gt; dataset from the Python &lt;a href='https://seaborn.pydata.org/'&gt;&lt;code&gt;seaborn&lt;/code&gt; visualization library&lt;/a&gt; and assign it to the DataFrame &lt;code&gt;df_tips&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tips&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each row represents a unique meal at a restaurant for a party of people; the dataset contains the following fields:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;column name&lt;/th&gt;
&lt;th&gt;column description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;total_bill&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;financial amount of meal in U.S. dollars&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;financial amount of the meal's tip in U.S. dollars&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;gender of server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;smoker&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;boolean to represent if server smokes or not&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;day&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;day of week&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;meal name (Lunch or Dinner)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;count of people eating meal&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Preview the first 5 rows of &lt;code&gt;df_tips&lt;/code&gt; using the pandas series &lt;a href='https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.head.html'&gt;&lt;code&gt;head()&lt;/code&gt; method&lt;/a&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;smoker&lt;/th&gt;
      &lt;th&gt;day&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;16.99&lt;/td&gt;
      &lt;td&gt;1.01&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;10.34&lt;/td&gt;
      &lt;td&gt;1.66&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;21.01&lt;/td&gt;
      &lt;td&gt;3.50&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;23.68&lt;/td&gt;
      &lt;td&gt;3.31&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;24.59&lt;/td&gt;
      &lt;td&gt;3.61&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;Create New Column Based on Mathematical Operations of Column(s)&lt;/h3&gt;
&lt;p&gt;We can perform mathematical operations on columns such as addition, division and multiplication.&lt;/p&gt;
&lt;h4&gt;Addition&lt;/h4&gt;
&lt;p&gt;Let's create a new column called &lt;code&gt;total_money_received&lt;/code&gt; that's the addition of the &lt;code&gt;total_bill&lt;/code&gt; and &lt;code&gt;tip&lt;/code&gt; column. This total amount is how much money the restaurant receives for each order.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_money_received&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's see a preview of these three columnns.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;total_money_received&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;th&gt;total_money_received&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;106&lt;/th&gt;
      &lt;td&gt;20.49&lt;/td&gt;
      &lt;td&gt;4.06&lt;/td&gt;
      &lt;td&gt;24.55&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;163&lt;/th&gt;
      &lt;td&gt;13.81&lt;/td&gt;
      &lt;td&gt;2.00&lt;/td&gt;
      &lt;td&gt;15.81&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;124&lt;/th&gt;
      &lt;td&gt;12.48&lt;/td&gt;
      &lt;td&gt;2.52&lt;/td&gt;
      &lt;td&gt;15.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;155&lt;/th&gt;
      &lt;td&gt;29.85&lt;/td&gt;
      &lt;td&gt;5.14&lt;/td&gt;
      &lt;td&gt;34.99&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;54&lt;/th&gt;
      &lt;td&gt;25.56&lt;/td&gt;
      &lt;td&gt;4.34&lt;/td&gt;
      &lt;td&gt;29.90&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h4&gt;Division&lt;/h4&gt;
&lt;p&gt;Let's create a new column called &lt;code&gt;tip_proportion_of_total_bill&lt;/code&gt; that's a calculation of &lt;code&gt;tip&lt;/code&gt; values divided by their respective &lt;code&gt;total_bill&lt;/code&gt; value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tip_proportion_of_total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's preview these three columns.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tip_proportion_of_total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;th&gt;tip_proportion_of_total_bill&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;127&lt;/th&gt;
      &lt;td&gt;14.52&lt;/td&gt;
      &lt;td&gt;2.00&lt;/td&gt;
      &lt;td&gt;0.137741&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25&lt;/th&gt;
      &lt;td&gt;17.81&lt;/td&gt;
      &lt;td&gt;2.34&lt;/td&gt;
      &lt;td&gt;0.131387&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;235&lt;/th&gt;
      &lt;td&gt;10.07&lt;/td&gt;
      &lt;td&gt;1.25&lt;/td&gt;
      &lt;td&gt;0.124131&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;65&lt;/th&gt;
      &lt;td&gt;20.08&lt;/td&gt;
      &lt;td&gt;3.15&lt;/td&gt;
      &lt;td&gt;0.156873&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;15.42&lt;/td&gt;
      &lt;td&gt;1.57&lt;/td&gt;
      &lt;td&gt;0.101816&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;For aesthetic purposes of the values in the &lt;code&gt;tip_proportion_of_total_bill&lt;/code&gt;, I will round all values to four decimal places using the &lt;a href='https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.round.html'&gt;&lt;code&gt;round()&lt;/code&gt; method&lt;/a&gt; below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tip_proportion_of_total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tip_proportion_of_total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decimals&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Additionally, I want to create a new column called &lt;code&gt;money_received_per_person&lt;/code&gt; that's a calculation of &lt;code&gt;total_money_received&lt;/code&gt; divided by &lt;code&gt;size&lt;/code&gt;. I round values in this new column to two decimal places.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_money_received&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decimals&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's preview these three columns.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_money_received&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_money_received&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
      &lt;th&gt;money_received_per_person&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;64&lt;/th&gt;
      &lt;td&gt;20.23&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;6.74&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;61&lt;/th&gt;
      &lt;td&gt;15.81&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;7.90&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;141&lt;/th&gt;
      &lt;td&gt;41.00&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;6.83&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;150&lt;/th&gt;
      &lt;td&gt;16.57&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8.28&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;155&lt;/th&gt;
      &lt;td&gt;34.99&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;7.00&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h4&gt;Multiplication&lt;/h4&gt;
&lt;p&gt;I want to create a new column called &lt;code&gt;tip_percentage_of_total_bill&lt;/code&gt; that simply takes our column called &lt;code&gt;tip_proportion_of_total_bill&lt;/code&gt; and multiplies the value by 100. I round values in this new column to two decimal places.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tip_percentage_of_total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tip_proportion_of_total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tip_percentage_of_total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tip_percentage_of_total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decimals&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's preview these columns recently used for multiplication.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tip_proportion_of_total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tip_percentage_of_total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;th&gt;tip_proportion_of_total_bill&lt;/th&gt;
      &lt;th&gt;tip_percentage_of_total_bill&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;16.99&lt;/td&gt;
      &lt;td&gt;1.01&lt;/td&gt;
      &lt;td&gt;0.0594&lt;/td&gt;
      &lt;td&gt;5.94&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;10.34&lt;/td&gt;
      &lt;td&gt;1.66&lt;/td&gt;
      &lt;td&gt;0.1605&lt;/td&gt;
      &lt;td&gt;16.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;21.01&lt;/td&gt;
      &lt;td&gt;3.50&lt;/td&gt;
      &lt;td&gt;0.1666&lt;/td&gt;
      &lt;td&gt;16.66&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;23.68&lt;/td&gt;
      &lt;td&gt;3.31&lt;/td&gt;
      &lt;td&gt;0.1398&lt;/td&gt;
      &lt;td&gt;13.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;24.59&lt;/td&gt;
      &lt;td&gt;3.61&lt;/td&gt;
      &lt;td&gt;0.1468&lt;/td&gt;
      &lt;td&gt;14.68&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;Create New Column Based on Mapping of Current Values to New Values&lt;/h3&gt;
&lt;p&gt;In our &lt;code&gt;day&lt;/code&gt; column, we see the following unique values printed out below using the pandas series &lt;a href='https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.unique.html'&gt;&lt;code&gt;unique&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Sun, Sat, Thur, Fri]&lt;/span&gt;
&lt;span class="na"&gt;Categories (4, object): [Sun, Sat, Thur, Fri]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I don't like how the days are shortened names. The name &lt;code&gt;Sun&lt;/code&gt; can be mapped to a longer and more colloquial name of &lt;code&gt;Sunday&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In pandas, we can use the series &lt;a href='https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.map.html'&gt;&lt;code&gt;map()&lt;/code&gt; method&lt;/a&gt; to map our current values, the shortened 
day names, to longer more colloquial names of days, our new values that we'll create in a new column called &lt;code&gt;day_long_name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below is a Python dictionary that assigns the short day names as keys and the longer names to their respective values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;short_day_name_to_long_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sunday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Saturday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Thur&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Thursday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Fri&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Friday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's assign the &lt;code&gt;map()&lt;/code&gt; method to the &lt;code&gt;day&lt;/code&gt; column and set the argument &lt;code&gt;arg&lt;/code&gt; equal to our &lt;code&gt;short_day_name_to_long_name&lt;/code&gt; dictionary. We'll set this equal to be the values in a new column assigned to &lt;code&gt;day_long_name&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;day_long_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;short_day_name_to_long_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's preview a few random rows of &lt;code&gt;day&lt;/code&gt; and &lt;code&gt;day_long_name&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;day_long_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;day&lt;/th&gt;
      &lt;th&gt;day_long_name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;40&lt;/th&gt;
      &lt;td&gt;Sat&lt;/td&gt;
      &lt;td&gt;Saturday&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;192&lt;/th&gt;
      &lt;td&gt;Thur&lt;/td&gt;
      &lt;td&gt;Thursday&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;89&lt;/th&gt;
      &lt;td&gt;Thur&lt;/td&gt;
      &lt;td&gt;Thursday&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;202&lt;/th&gt;
      &lt;td&gt;Thur&lt;/td&gt;
      &lt;td&gt;Thursday&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;98&lt;/th&gt;
      &lt;td&gt;Fri&lt;/td&gt;
      &lt;td&gt;Friday&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;Create New Column Based on Conditions Across Various Columns&lt;/h3&gt;
&lt;p&gt;If I were the owner of this restaurant, I'd want to learn more about the context of large groups who ordered a large dollar amount of food. To learn more about this category, I want to create a new column in our DataFrame with these characteristics.&lt;/p&gt;
&lt;p&gt;First, let's view the distribution of the column &lt;code&gt;money_received_per_person&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;talk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boxplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Distribution of Money Received Per Person Values&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.015&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;money received per person [$]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labelpad&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="create_new_column_files/create_new_column_43_0.png"&gt;&lt;/p&gt;
&lt;p&gt;We can see the median is roughly at 8.50 U.S. dollars.&lt;/p&gt;
&lt;p&gt;Below, I assign variables for the 75th and 25th percentile of the &lt;code&gt;money_received_per_person&lt;/code&gt; column that we'll use in our analysis to help create the category of big spenders per person.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;large_amt_paid_per_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quantile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;large_amt_paid_per_person&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;10.71
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;small_amt_paid_per_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quantile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;small_amt_paid_per_person&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;6.75
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below, I assign a variable &lt;code&gt;conditions&lt;/code&gt; to be a list of conditions that characterize people served at our restaurant by the columns &lt;code&gt;money_received_per_person&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt;. In our first index of the variable &lt;code&gt;conditions&lt;/code&gt;, that condition is met if &lt;code&gt;money_received_per_person&lt;/code&gt; is greater than &lt;code&gt;large_amt_paid_per_person&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; is greater than or equal to 3. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;conditions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;large_amt_paid_per_person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;large_amt_paid_per_person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;between&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;small_amt_paid_per_person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;large_amt_paid_per_person&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;between&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;small_amt_paid_per_person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;large_amt_paid_per_person&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;small_amt_paid_per_person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;small_amt_paid_per_person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There's a variable called &lt;code&gt;choices&lt;/code&gt; that's a list of text strings that classify this category of people that meet this condition. In the example described above, I want to classify that group of people that spend a lot of money per person and are large groups as &lt;code&gt;big spenders &amp;amp; large group&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;big spenders &amp;amp; large group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;big spenders &amp;amp; small group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
           &lt;span class="s1"&gt;&amp;#39;medium spenders &amp;amp; large group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;medium spenders &amp;amp; small group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s1"&gt;&amp;#39;small spenders &amp;amp; large group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;small spenders &amp;amp; small group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The numpy &lt;code&gt;select()&lt;/code&gt; method returns an array drawn from elements in a choicelist. We can use our conditions above and are outcome choices to classify those groups of people based on money spent per person and group size.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;select()&lt;/code&gt; method below, I set the argument &lt;code&gt;condlist&lt;/code&gt; to be our &lt;code&gt;conditions&lt;/code&gt; and the argument &lt;code&gt;choicelist&lt;/code&gt; to be our &lt;code&gt;choices&lt;/code&gt;.  I created the variables &lt;code&gt;conditions&lt;/code&gt; and &lt;code&gt;choices&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;party_category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condlist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choicelist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For the new column created &lt;code&gt;party_category&lt;/code&gt;, I apply the &lt;code&gt;value_counts()&lt;/code&gt; method to see a count of each of the unique values in the column.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;party_category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_counts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;medium spenders &amp;amp; small group    82
big spenders &amp;amp; small group       48
medium spenders &amp;amp; large group    40
small spenders &amp;amp; large group     31
small spenders &amp;amp; small group     30
big spenders &amp;amp; large group       13
Name: party_category, dtype: int64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's preview the relevant columns used in this analysis.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;money_received_per_person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;party_category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;money_received_per_person&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
      &lt;th&gt;party_category&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;167&lt;/th&gt;
      &lt;td&gt;9.05&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;medium spenders &amp;amp; large group&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;226&lt;/th&gt;
      &lt;td&gt;6.04&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;small spenders &amp;amp; small group&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;65&lt;/th&gt;
      &lt;td&gt;7.74&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;medium spenders &amp;amp; large group&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;231&lt;/th&gt;
      &lt;td&gt;6.23&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;small spenders &amp;amp; large group&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25&lt;/th&gt;
      &lt;td&gt;5.04&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;small spenders &amp;amp; large group&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;</content><category term="python"></category><category term="pandas"></category></entry><entry><title>groupby() Method: Split Data into Groups, Apply a Function to Groups, Combine the Results</title><link href="https://dfrieds.com/data-analysis/groupby-python-pandas" rel="alternate"></link><published>2018-11-28T08:30:00-08:00</published><updated>2018-11-28T08:30:00-08:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2018-11-28:/data-analysis/groupby-python-pandas</id><summary type="html">&lt;p&gt;Learn how to implement a groupby in Python using pandas with simple examples&lt;/p&gt;</summary><content type="html">&lt;p&gt;A &lt;strong&gt;group by&lt;/strong&gt; is a process that tyipcally involves splitting the data into groups based on some criteria, applying a function to each group independently, and then combining the outputted results.&lt;/p&gt;
&lt;h3&gt;Import Modules&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get Tips Dataset&lt;/h3&gt;
&lt;p&gt;Let's get the &lt;code&gt;tips&lt;/code&gt; dataset from the &lt;code&gt;seaborn&lt;/code&gt; library and assign it to the DataFrame &lt;code&gt;df_tips&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tips&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each row represents a unique meal at a restaurant for a party of people; the dataset contains the following fields:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;column name&lt;/th&gt;
&lt;th&gt;column description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;total_bill&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;financial amount of meal in U.S. dollars&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;financial amount of the meal's tip in U.S. dollars&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;gender of server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;smoker&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;boolean to represent if server smokes or not&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;day&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;day of week&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;meal name (Lunch or Dinner)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;count of people eating meal&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Preview the first 5 rows of &lt;code&gt;df_tips&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;smoker&lt;/th&gt;
      &lt;th&gt;day&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;16.99&lt;/td&gt;
      &lt;td&gt;1.01&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;10.34&lt;/td&gt;
      &lt;td&gt;1.66&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;21.01&lt;/td&gt;
      &lt;td&gt;3.50&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;23.68&lt;/td&gt;
      &lt;td&gt;3.31&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;24.59&lt;/td&gt;
      &lt;td&gt;3.61&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;Implement Group bys with Tips Dataset&lt;/h3&gt;
&lt;h4&gt;Group by of a Single Column and Apply a Single Aggregate Method on a Column&lt;/h4&gt;
&lt;p&gt;The simplest example of a &lt;code&gt;groupby()&lt;/code&gt; operation is to compute the size of groups in a single column. By size, the calculation is a count of unique occurences of values in a single column. Here is the &lt;a href='https://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.size.html'&gt;official documentation&lt;/a&gt; for this operation. &lt;/p&gt;
&lt;p&gt;This is the same operation as utilizing the &lt;code&gt;value_counts()&lt;/code&gt; method in pandas.&lt;/p&gt;
&lt;p&gt;Below, for the &lt;code&gt;df_tips&lt;/code&gt; DataFrame, I call the &lt;code&gt;groupby()&lt;/code&gt; method, pass in the &lt;code&gt;sex&lt;/code&gt; column, and then chain the &lt;code&gt;size()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sex
Male      157
Female     87
dtype: int64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To interpret the output above, 157 meals were served by males and 87 meals were served by females.&lt;/p&gt;
&lt;p&gt;A note, if there are any &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;NaT&lt;/code&gt; values in the grouped column that would appear in the index, those are automatically excluded in your output (&lt;a href='https://pandas.pydata.org/pandas-docs/version/0.22/groupby.html#na-and-nat-group-handling'&gt;reference here&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;In pandas, we can also group by one columm and then perform an aggregate method on a different column.&lt;/p&gt;
&lt;p&gt;For example, in our dataset, I want to group by the &lt;code&gt;sex&lt;/code&gt; column and then across the &lt;code&gt;total_bill&lt;/code&gt; column, find the mean bill size. To do this in pandas, given our &lt;code&gt;df_tips&lt;/code&gt; DataFrame, apply the &lt;code&gt;groupby()&lt;/code&gt; method and pass in the &lt;code&gt;sex&lt;/code&gt; column (that'll be our index), and then reference our &lt;code&gt;['total_bill']&lt;/code&gt; column (that'll be our returned column) and chain the &lt;code&gt;mean()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Meals served by males had a mean bill size of 20.74 while meals served by females had a mean bill size of 18.06.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sex
Male      20.744076
Female    18.056897
Name: total_bill, dtype: float64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can verify the output above with a query. We get the same result that meals served by males had a mean bill size of 20.74&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sex==&amp;#39;Male&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;20.744076433121034
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another interesting tidbit with the &lt;code&gt;groupby()&lt;/code&gt; method is the ability to group by a single column, and call an aggregate method that will apply to all other numeric columns in the DataFrame.&lt;/p&gt;
&lt;p&gt;For example, if I group by the &lt;code&gt;sex&lt;/code&gt; column and call the &lt;code&gt;mean()&lt;/code&gt; method, the mean is calculated for the three other numeric columns in &lt;code&gt;df_tips&lt;/code&gt; which are &lt;code&gt;total_bill&lt;/code&gt;, &lt;code&gt;tip&lt;/code&gt;, and &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Male&lt;/th&gt;
      &lt;td&gt;20.744076&lt;/td&gt;
      &lt;td&gt;3.089618&lt;/td&gt;
      &lt;td&gt;2.630573&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Female&lt;/th&gt;
      &lt;td&gt;18.056897&lt;/td&gt;
      &lt;td&gt;2.833448&lt;/td&gt;
      &lt;td&gt;2.459770&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h4&gt;Aggregate Methods&lt;/h4&gt;
&lt;p&gt;Other aggregate methods you could perform with a &lt;code&gt;groupby()&lt;/code&gt; method in pandas are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;method&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sum()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;summation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mean()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;average&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;count of all values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;count of non-null values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;maximum value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;minimum value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;standard deviation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;median()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;median&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To illustrate the difference between the &lt;code&gt;size()&lt;/code&gt; and &lt;code&gt;count()&lt;/code&gt; methods, I included this simple example below.&lt;/p&gt;
&lt;p&gt;The DataFrame below of &lt;code&gt;df_rides&lt;/code&gt; includes Dan and Jamie's ride data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Dan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Dan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jamie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jamie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
        &lt;span class="s1"&gt;&amp;#39;ride_duration_minutes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="n"&gt;df_rides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df_rides&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;person&lt;/th&gt;
      &lt;th&gt;ride_duration_minutes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Dan&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Dan&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Jamie&lt;/td&gt;
      &lt;td&gt;8.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Jamie&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;For one of Dan's rides, the &lt;code&gt;ride_duration_minutes&lt;/code&gt; value is null. However, if we apply the &lt;code&gt;size&lt;/code&gt; method, we'll still see a count of &lt;code&gt;2&lt;/code&gt; rides for Dan. We are 100% sure he took 2 rides but there's only a small issue in our dataset in which the the exact duration of one ride wasn't recorded.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_rides&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ride_duration_minutes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;person
Dan      2
Jamie    2
Name: ride_duration_minutes, dtype: int64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Upon applying the &lt;code&gt;count()&lt;/code&gt; method, we only see a count of &lt;code&gt;1&lt;/code&gt; for Dan because that's the number of non-null values in the &lt;code&gt;ride_duration_minutes&lt;/code&gt; field that belongs to him.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_rides&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ride_duration_minutes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;person
Dan      1
Jamie    2
Name: ride_duration_minutes, dtype: int64
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Group by of a Single Column and Apply the &lt;code&gt;describe()&lt;/code&gt; Method on a Single Column&lt;/h4&gt;
&lt;p&gt;With grouping of a single column, you can also apply the &lt;code&gt;describe()&lt;/code&gt; method to a numerical column. Below, I group by the &lt;code&gt;sex&lt;/code&gt; column, reference the &lt;code&gt;total_bill&lt;/code&gt; column and apply the &lt;code&gt;describe()&lt;/code&gt; method on its values. The &lt;code&gt;describe&lt;/code&gt; method outputs many descriptive statistics. Learn more about the &lt;code&gt;describe()&lt;/code&gt; method on the official &lt;a href='https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.describe.html'&gt;documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;std&lt;/th&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;th&gt;25%&lt;/th&gt;
      &lt;th&gt;50%&lt;/th&gt;
      &lt;th&gt;75%&lt;/th&gt;
      &lt;th&gt;max&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Male&lt;/th&gt;
      &lt;td&gt;157.0&lt;/td&gt;
      &lt;td&gt;20.744076&lt;/td&gt;
      &lt;td&gt;9.246469&lt;/td&gt;
      &lt;td&gt;7.25&lt;/td&gt;
      &lt;td&gt;14.00&lt;/td&gt;
      &lt;td&gt;18.35&lt;/td&gt;
      &lt;td&gt;24.71&lt;/td&gt;
      &lt;td&gt;50.81&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Female&lt;/th&gt;
      &lt;td&gt;87.0&lt;/td&gt;
      &lt;td&gt;18.056897&lt;/td&gt;
      &lt;td&gt;8.009209&lt;/td&gt;
      &lt;td&gt;3.07&lt;/td&gt;
      &lt;td&gt;12.75&lt;/td&gt;
      &lt;td&gt;16.40&lt;/td&gt;
      &lt;td&gt;21.52&lt;/td&gt;
      &lt;td&gt;44.30&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h4&gt;Group by of a Single Column and Apply a Lambda Expression on a Single Column&lt;/h4&gt;
&lt;p&gt;Most examples in this tutorial involve using simple aggregate methods like calculating the mean, sum or a count. However, with group bys, we have flexibility to apply custom lambda functions. &lt;/p&gt;
&lt;p&gt;You can learn more about lambda expressions from the &lt;a href='https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions'&gt;Python 3 documentation&lt;/a&gt; and about using instance methods in group bys from the &lt;a href='https://pandas.pydata.org/pandas-docs/version/0.22/groupby.html#dispatching-to-instance-methods'&gt;official pandas documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below, I group by the &lt;code&gt;sex&lt;/code&gt; column and apply a lambda expression to the &lt;code&gt;total_bill&lt;/code&gt; column. The expression is to find the range of &lt;code&gt;total_bill&lt;/code&gt; values. The range is the maximum value subtracted by the minimum value. I also rename the single column returned on output so it's understandable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agg&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;bill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bill&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;bill&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;()})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;range_total_bill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;range_total_bill&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Male&lt;/th&gt;
      &lt;td&gt;43.56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Female&lt;/th&gt;
      &lt;td&gt;41.23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;In this dataset, males had a bigger range of &lt;code&gt;total_bill&lt;/code&gt; values.&lt;/p&gt;
&lt;h4&gt;Group by of Multiple Columns and Apply a Single Aggregate Method on a Column&lt;/h4&gt;
&lt;p&gt;We can group by multiple columns too. For example, I want to know the count of meals served by people's gender for each day of the week. So, call the &lt;code&gt;groupby()&lt;/code&gt; method and set the &lt;code&gt;by&lt;/code&gt; argument to a list of the columns we want to group by.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sex     day 
Male    Thur    30
        Fri     10
        Sat     59
        Sun     58
Female  Thur    32
        Fri      9
        Sat     28
        Sun     18
dtype: int64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also group by multiple columns and apply an aggregate method on a different column. Below I group by people's gender and day of the week and find the total sum of those groups' bills.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sex     day 
Male    Thur     561.44
        Fri      198.57
        Sat     1227.35
        Sun     1269.46
Female  Thur     534.89
        Fri      127.31
        Sat      551.05
        Sun      357.70
Name: total_bill, dtype: float64
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Group by of a Single Column and Apply Multiple Aggregate Methods on a Column&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;agg()&lt;/code&gt; method allows us to specify multiple functions to apply to each column. Below, I group by the &lt;code&gt;sex&lt;/code&gt; column and then we'll apply multiple aggregate methods to the &lt;code&gt;total_bill&lt;/code&gt; column. Inside the &lt;code&gt;agg()&lt;/code&gt; method, I pass a dictionary and specify &lt;code&gt;total_bill&lt;/code&gt; as the key and a list of aggregate methods as the value. &lt;/p&gt;
&lt;p&gt;You can pass various types of syntax inside the argument for the &lt;code&gt;agg()&lt;/code&gt; method. I chose a dictionary because that syntax will be helpful when we want to apply aggregate methods to multiple columns later on in this tutorial.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agg&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead tr th {
        text-align: left;
    }

    .dataframe thead tr:last-of-type th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th colspan="3" halign="left"&gt;total_bill&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;sum&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Male&lt;/th&gt;
      &lt;td&gt;157&lt;/td&gt;
      &lt;td&gt;20.744076&lt;/td&gt;
      &lt;td&gt;3256.82&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Female&lt;/th&gt;
      &lt;td&gt;87&lt;/td&gt;
      &lt;td&gt;18.056897&lt;/td&gt;
      &lt;td&gt;1570.95&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;You can learn more about the &lt;code&gt;agg()&lt;/code&gt; method on the official pandas &lt;a href='https://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.DataFrameGroupBy.agg.html'&gt;documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code below performs the same group by operation as above, and additionally I rename columns to have clearer names.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agg&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;count_meals_served&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;average_bill_of_meal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;total_bills_of_meals&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead tr th {
        text-align: left;
    }

    .dataframe thead tr:last-of-type th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th colspan="3" halign="left"&gt;total_bill&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;count_meals_served&lt;/th&gt;
      &lt;th&gt;average_bill_of_meal&lt;/th&gt;
      &lt;th&gt;total_bills_of_meals&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Male&lt;/th&gt;
      &lt;td&gt;157&lt;/td&gt;
      &lt;td&gt;20.744076&lt;/td&gt;
      &lt;td&gt;3256.82&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Female&lt;/th&gt;
      &lt;td&gt;87&lt;/td&gt;
      &lt;td&gt;18.056897&lt;/td&gt;
      &lt;td&gt;1570.95&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We can modify the format of the output above through chaining the &lt;code&gt;unstack()&lt;/code&gt; and &lt;code&gt;reset_index()&lt;/code&gt; methods after our group by operation. This format may be ideal for additional analysis later on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agg&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unstack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;level_0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aggregated_column&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;level_1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aggregate_metric&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;grouped_column&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aggregate_calculation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;aggregated_column&lt;/th&gt;
      &lt;th&gt;aggregate_metric&lt;/th&gt;
      &lt;th&gt;grouped_column&lt;/th&gt;
      &lt;th&gt;aggregate_calculation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;total_bill&lt;/td&gt;
      &lt;td&gt;count&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;157.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;total_bill&lt;/td&gt;
      &lt;td&gt;count&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;87.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;total_bill&lt;/td&gt;
      &lt;td&gt;mean&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;20.74&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;total_bill&lt;/td&gt;
      &lt;td&gt;mean&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;18.06&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;total_bill&lt;/td&gt;
      &lt;td&gt;sum&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;3256.82&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;total_bill&lt;/td&gt;
      &lt;td&gt;sum&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;1570.95&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h4&gt;Group by of a Single Column and Apply Multiple Aggregate Methods on Multiple Columns&lt;/h4&gt;
&lt;p&gt;Below, I use the &lt;code&gt;agg()&lt;/code&gt; method to apply two different aggregate methods to two different columns. I group by the &lt;code&gt;sex&lt;/code&gt; column and for the &lt;code&gt;total_bill&lt;/code&gt; column, apply the &lt;code&gt;max&lt;/code&gt; method, and for the &lt;code&gt;tip&lt;/code&gt; column, apply the &lt;code&gt;min&lt;/code&gt; method. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agg&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;max&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;min&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;max_total_bill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;min_tip_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;max_total_bill&lt;/th&gt;
      &lt;th&gt;min_tip_amount&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Male&lt;/th&gt;
      &lt;td&gt;50.81&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Female&lt;/th&gt;
      &lt;td&gt;44.30&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h4&gt;Group by of Multiple Columns and Apply a Groupwise Calculation on Multiple Columns&lt;/h4&gt;
&lt;p&gt;In restaurants, common math by guests is to calculate the tip for the waiter/waittress. My mom thinks 20% tip is customary. So, if the bill was 10, you should tip 2 and pay 12 in total. I'm curious what the tip percentages are based on the gender of servers, meal and day of the week. We can perform that calculation with a &lt;code&gt;groupby()&lt;/code&gt; and the &lt;code&gt;pipe()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;pipe()&lt;/code&gt; method allows us to call functions in a &lt;em&gt;chain&lt;/em&gt;. So as the &lt;code&gt;groupby()&lt;/code&gt; method is called, at the same time, another function is being called to perform data manipulations. You can learn more about &lt;code&gt;pipe()&lt;/code&gt; from the &lt;a href='https://pandas.pydata.org/pandas-docs/version/0.22/groupby.html#piping-function-calls'&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To perform this calculation, we need to group by &lt;code&gt;sex&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;day&lt;/code&gt;, then call our &lt;code&gt;pipe()&lt;/code&gt; method and calculate the &lt;code&gt;tip&lt;/code&gt; divided by &lt;code&gt;total_bill&lt;/code&gt; multiplied by &lt;code&gt;100&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_tips&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_bill&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sex     time    day 
Male    Lunch   Thur    15.925121
                Fri     16.686183
        Dinner  Fri     12.912840
                Sat     14.824622
                Sun     14.713343
Female  Lunch   Thur    15.388192
                Fri     19.691535
        Dinner  Thur    15.974441
                Fri     19.636618
                Sat     14.236458
                Sun     16.944367
dtype: float64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The highest tip percentage has been for females for dinner on Sunday.&lt;/p&gt;</content><category term="groupby"></category><category term="python"></category><category term="pandas"></category></entry><entry><title>value_counts() Method: Count Unique Occurrences of Values in a Column</title><link href="https://dfrieds.com/data-analysis/value-counts-python-pandas" rel="alternate"></link><published>2018-11-25T08:50:00-08:00</published><updated>2018-11-25T08:50:00-08:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2018-11-25:/data-analysis/value-counts-python-pandas</id><summary type="html">&lt;p&gt;Learn how to use the value_counts() method in Python with pandas through simple examples&lt;/p&gt;</summary><content type="html">&lt;p&gt;In pandas, for a column in a DataFrame, we can use the &lt;a href='https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.value_counts.html'&gt;&lt;code&gt;value_counts()&lt;/code&gt; method&lt;/a&gt; to easily count the unique occurences of values. &lt;/p&gt;
&lt;p&gt;There's additional interesting analyis we can do with &lt;code&gt;value_counts()&lt;/code&gt; too. We'll try them out using the titanic dataset. &lt;/p&gt;
&lt;h3&gt;Import Module&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get Titanic Dataset&lt;/h3&gt;
&lt;p&gt;We'll use the &lt;em&gt;titanic&lt;/em&gt; dataset included in the seaborn library. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;titanic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below is a preview of the first few rows of the dataset.&lt;/p&gt;
&lt;p&gt;Each row includes details of a person who boarded the famous Titanic cruise ship. &lt;/p&gt;
&lt;p&gt;In this tutorial, we're just going to utilize the &lt;code&gt;sex&lt;/code&gt; and &lt;code&gt;fare&lt;/code&gt; columns. The &lt;code&gt;sex&lt;/code&gt; column classifies the person's gender as male or female. The &lt;code&gt;fare&lt;/code&gt; column indicates the dollar amount each person paid to board the Titanic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;survived&lt;/th&gt;
      &lt;th&gt;pclass&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;age&lt;/th&gt;
      &lt;th&gt;sibsp&lt;/th&gt;
      &lt;th&gt;parch&lt;/th&gt;
      &lt;th&gt;fare&lt;/th&gt;
      &lt;th&gt;embarked&lt;/th&gt;
      &lt;th&gt;class&lt;/th&gt;
      &lt;th&gt;who&lt;/th&gt;
      &lt;th&gt;adult_male&lt;/th&gt;
      &lt;th&gt;deck&lt;/th&gt;
      &lt;th&gt;embark_town&lt;/th&gt;
      &lt;th&gt;alive&lt;/th&gt;
      &lt;th&gt;alone&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;7.2500&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;Third&lt;/td&gt;
      &lt;td&gt;man&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Southampton&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;71.2833&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;First&lt;/td&gt;
      &lt;td&gt;woman&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;Cherbourg&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;26.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;7.9250&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;Third&lt;/td&gt;
      &lt;td&gt;woman&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Southampton&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;53.1000&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;First&lt;/td&gt;
      &lt;td&gt;woman&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;Southampton&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;8.0500&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;Third&lt;/td&gt;
      &lt;td&gt;man&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Southampton&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;Fun with &lt;code&gt;value_counts()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Here is the simple use of &lt;code&gt;value_counts()&lt;/code&gt; we call on the &lt;code&gt;sex&lt;/code&gt; column that returns us the count of occurences of each of the unique values in this column. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_counts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;male      577
female    314
Name: sex, dtype: int64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we want to do the same operation, but this time sort our outputted values in the &lt;code&gt;sex&lt;/code&gt; column, male and female, so that values that start with the letter &lt;em&gt;a&lt;/em&gt; appear at the top and values that start with letter &lt;em&gt;z&lt;/em&gt; appear at the bottom. This is considered ascending order.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;f&lt;/em&gt; is before &lt;em&gt;m&lt;/em&gt; in the alphabet so we see female before male.&lt;/p&gt;
&lt;p&gt;In our &lt;code&gt;value_counts&lt;/code&gt; method, we'll set the argument &lt;code&gt;ascending&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_counts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ascending&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;female    314
male      577
Name: sex, dtype: int64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Often times, we want to know what percentage of the whole is for each value that appears in the column. For example, if we took the two counts above, 577 and 314 and we sum them up, we'd get 891. So, what percentage of people on the titanic were male. The calculation is 577/891 x 100 = 64.75%. &lt;/p&gt;
&lt;p&gt;To calculate this in pandas with the &lt;code&gt;value_counts()&lt;/code&gt; method, set the argument &lt;code&gt;normalize&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_counts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;male      0.647587
female    0.352413
Name: sex, dtype: float64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before we try a new &lt;code&gt;value_counts()&lt;/code&gt; argument, let's take a look at some basic descriptive statistics of the &lt;code&gt;fare&lt;/code&gt; column. To accomplish this, we'll call the &lt;code&gt;describe()&lt;/code&gt; method on the column.&lt;/p&gt;
&lt;p&gt;There's 891 values of fare data, a mean of 32 and a standard deviation of 49 which indicates a fairly wide spread of data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fare&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;count    891.000000
mean      32.204208
std       49.693429
min        0.000000
25%        7.910400
50%       14.454200
75%       31.000000
max      512.329200
Name: fare, dtype: float64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another interesting feature of the &lt;code&gt;value_counts()&lt;/code&gt; method is that it can be used to bin continuous data into discrete intervals. We set the argument &lt;code&gt;bins&lt;/code&gt; to an integer representing the number of bins to create. &lt;/p&gt;
&lt;p&gt;For each bin, the range of fare amounts in dollar values is the same. One contains fares from 73.19 to 146.38 which is a range of 73.19. Another bin contains fares from 146.38 to 73.19 which is also a range of 73.19. See how the ranges are same! However, inside each range of fare values can contain a different count of the number of tickets bought by passengers of the Titanic.&lt;/p&gt;
&lt;p&gt;We can see most people paid under 73.19 for their ticket.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fare&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_counts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(-0.513, 73.19]       789
(73.19, 146.38]        71
(146.38, 219.57]       15
(219.57, 292.76]       13
(439.139, 512.329]      3
(365.949, 439.139]      0
(292.76, 365.949]       0
Name: fare, dtype: int64
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="pandas"></category></entry><entry><title>melt() Method: Unpivot a DataFrame</title><link href="https://dfrieds.com/data-analysis/melt-unpivot-python-pandas" rel="alternate"></link><published>2018-11-25T07:40:00-08:00</published><updated>2018-11-25T07:40:00-08:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2018-11-25:/data-analysis/melt-unpivot-python-pandas</id><summary type="html">&lt;p&gt;Unpivot a pandas DataFrame (Python) using the melt() method and through a simple example&lt;/p&gt;</summary><content type="html">&lt;p&gt;In pandas, we can "unpivot" a DataFrame - turn it from a &lt;em&gt;wide&lt;/em&gt; format - many columns - to a &lt;em&gt;long&lt;/em&gt; format - few columns but many rows. We can accomplish this with the pandas &lt;a href='https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.melt.html'&gt;&lt;code&gt;melt()&lt;/code&gt;&lt;/a&gt; method. This can be helpful for further analysis of our new unpivoted DataFrame.&lt;/p&gt;
&lt;h3&gt;Import Module&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example: Pivot Tesla Car Acceleration Details&lt;/h3&gt;
&lt;p&gt;Here is fictional acceleration tests for three popular Tesla car models. In order to verify acceleration of the cars, I figured a third-party may make three &lt;em&gt;runs&lt;/em&gt; to test the three models alongside one another.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tesla Model S P100D&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tesla Model X P100D&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;three&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tesla Model 3 AWD Dual Motor&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;s_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.54&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;x_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.93&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;three_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.35&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;three_data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;car_model&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sept 1 9am&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sept 1 10am&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sept 1 11am&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;car_model&lt;/th&gt;
      &lt;th&gt;Sept 1 9am&lt;/th&gt;
      &lt;th&gt;Sept 1 10am&lt;/th&gt;
      &lt;th&gt;Sept 1 11am&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Tesla Model S P100D&lt;/td&gt;
      &lt;td&gt;2.50&lt;/td&gt;
      &lt;td&gt;2.51&lt;/td&gt;
      &lt;td&gt;2.54&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Tesla Model X P100D&lt;/td&gt;
      &lt;td&gt;2.92&lt;/td&gt;
      &lt;td&gt;2.91&lt;/td&gt;
      &lt;td&gt;2.93&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Tesla Model 3 AWD Dual Motor&lt;/td&gt;
      &lt;td&gt;3.33&lt;/td&gt;
      &lt;td&gt;3.31&lt;/td&gt;
      &lt;td&gt;3.35&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Notice how this DataFrame features four columns, one for the car model name, and three for acceleration &lt;em&gt;runs&lt;/em&gt; of a car. If they were to continue with this trend of data collection and do far more &lt;em&gt;runs&lt;/em&gt;, this dataset would have lots of columns - perhaps making it daunting to visualize and analyze. &lt;/p&gt;
&lt;p&gt;I want to "unpivot" this data from a wide format to a long format using the pandas &lt;code&gt;melt()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;On the &lt;code&gt;df&lt;/code&gt; DataFrame, we'll call the &lt;code&gt;melt()&lt;/code&gt; method and set the following arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id_vars&lt;/code&gt; to &lt;code&gt;['car_model']&lt;/code&gt; since each row from &lt;code&gt;df&lt;/code&gt; is identified by the car model name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var_name&lt;/code&gt; to &lt;code&gt;'date'&lt;/code&gt; since this new column needs a name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value_name&lt;/code&gt; to &lt;code&gt;'0-60mph_in_seconds'&lt;/code&gt; since this new column needs a name&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_unpivoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;melt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_vars&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;car_model&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0-60mph_in_seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df_unpivoted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;car_model&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;0-60mph_in_seconds&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Tesla Model S P100D&lt;/td&gt;
      &lt;td&gt;Sept 1 9am&lt;/td&gt;
      &lt;td&gt;2.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Tesla Model X P100D&lt;/td&gt;
      &lt;td&gt;Sept 1 9am&lt;/td&gt;
      &lt;td&gt;2.92&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Tesla Model 3 AWD Dual Motor&lt;/td&gt;
      &lt;td&gt;Sept 1 9am&lt;/td&gt;
      &lt;td&gt;3.33&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Tesla Model S P100D&lt;/td&gt;
      &lt;td&gt;Sept 1 10am&lt;/td&gt;
      &lt;td&gt;2.51&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Tesla Model X P100D&lt;/td&gt;
      &lt;td&gt;Sept 1 10am&lt;/td&gt;
      &lt;td&gt;2.91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Tesla Model 3 AWD Dual Motor&lt;/td&gt;
      &lt;td&gt;Sept 1 10am&lt;/td&gt;
      &lt;td&gt;3.31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;Tesla Model S P100D&lt;/td&gt;
      &lt;td&gt;Sept 1 11am&lt;/td&gt;
      &lt;td&gt;2.54&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;Tesla Model X P100D&lt;/td&gt;
      &lt;td&gt;Sept 1 11am&lt;/td&gt;
      &lt;td&gt;2.93&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;Tesla Model 3 AWD Dual Motor&lt;/td&gt;
      &lt;td&gt;Sept 1 11am&lt;/td&gt;
      &lt;td&gt;3.35&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;After this "unpivot", we can easily calculate the minimum (essentially the fastest) 0-60 time that we'd publish in a final report. To do so, we take our &lt;code&gt;df_unpivoted&lt;/code&gt; DataFrame, group by the &lt;code&gt;car_model&lt;/code&gt; column, and find the minimum value in the &lt;code&gt;0-60mph_in_seconds&lt;/code&gt; column.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df_unpivoted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;car_model&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0-60mph_in_seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;car_model
Tesla Model 3 AWD Dual Motor    3.31
Tesla Model S P100D             2.50
Tesla Model X P100D             2.91
Name: 0-60mph_in_seconds, dtype: float64
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="unpivot"></category><category term="melt"></category><category term="python"></category><category term="pandas"></category></entry><entry><title>pivot() Method: Pivot DataFrame Without Aggregation Operation</title><link href="https://dfrieds.com/data-analysis/pivot-python-pandas" rel="alternate"></link><published>2018-11-24T17:20:00-08:00</published><updated>2018-11-24T17:20:00-08:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2018-11-24:/data-analysis/pivot-python-pandas</id><summary type="html">&lt;p&gt;Learn how to pivot a pandas DataFrame and apply an aggregate metric using the pivot() method and through simple examples&lt;/p&gt;</summary><content type="html">&lt;p&gt;In pandas, we can pivot our DataFrame without applying an aggregate operation. This pivot is helpful to see our data in a different way - often turning a format with many rows that would require scrolling into a new format with fewer rows but perhaps more columns.&lt;/p&gt;
&lt;h3&gt;Import Module&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example: Pivot Tesla Car Acceleration Details&lt;/h3&gt;
&lt;p&gt;Here is fictional acceleration tests for three popular Tesla car models. In order to verify acceleration of the cars, I figured a third-party may make three &lt;em&gt;runs&lt;/em&gt; to test the three models alongside one another.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tesla Model S P100D&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tesla Model X P100D&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;three&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tesla Model 3 AWD Dual Motor&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;models&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sept 1 9am&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sept 1 10am&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sept 1 11am&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;acceleration_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;car_model&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="s1"&gt;&amp;#39;0-60mph_in_seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;acceleration_times&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;car_model&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;0-60mph_in_seconds&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Tesla Model S P100D&lt;/td&gt;
      &lt;td&gt;Sept 1 9am&lt;/td&gt;
      &lt;td&gt;2.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Tesla Model X P100D&lt;/td&gt;
      &lt;td&gt;Sept 1 9am&lt;/td&gt;
      &lt;td&gt;2.92&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Tesla Model 3 AWD Dual Motor&lt;/td&gt;
      &lt;td&gt;Sept 1 9am&lt;/td&gt;
      &lt;td&gt;3.33&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Tesla Model S P100D&lt;/td&gt;
      &lt;td&gt;Sept 1 10am&lt;/td&gt;
      &lt;td&gt;2.51&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Tesla Model X P100D&lt;/td&gt;
      &lt;td&gt;Sept 1 10am&lt;/td&gt;
      &lt;td&gt;2.91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Tesla Model 3 AWD Dual Motor&lt;/td&gt;
      &lt;td&gt;Sept 1 10am&lt;/td&gt;
      &lt;td&gt;3.31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;Tesla Model S P100D&lt;/td&gt;
      &lt;td&gt;Sept 1 11am&lt;/td&gt;
      &lt;td&gt;2.51&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;Tesla Model X P100D&lt;/td&gt;
      &lt;td&gt;Sept 1 11am&lt;/td&gt;
      &lt;td&gt;2.92&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;Tesla Model 3 AWD Dual Motor&lt;/td&gt;
      &lt;td&gt;Sept 1 11am&lt;/td&gt;
      &lt;td&gt;3.30&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I want to pivot this data so each row is a unique car model, the columns are dates and the values in the table are the acceleration speeds.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;car_model&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0-60mph_in_seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;Sept 1 10am&lt;/th&gt;
      &lt;th&gt;Sept 1 11am&lt;/th&gt;
      &lt;th&gt;Sept 1 9am&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;car_model&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Tesla Model 3 AWD Dual Motor&lt;/th&gt;
      &lt;td&gt;3.31&lt;/td&gt;
      &lt;td&gt;3.30&lt;/td&gt;
      &lt;td&gt;3.33&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tesla Model S P100D&lt;/th&gt;
      &lt;td&gt;2.51&lt;/td&gt;
      &lt;td&gt;2.51&lt;/td&gt;
      &lt;td&gt;2.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Tesla Model X P100D&lt;/th&gt;
      &lt;td&gt;2.91&lt;/td&gt;
      &lt;td&gt;2.92&lt;/td&gt;
      &lt;td&gt;2.92&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This format may be easier to read so you can easily focus your attention on just the acceleration times for the 3 models.&lt;/p&gt;
&lt;p&gt;You can read more about pandas &lt;code&gt;pivot()&lt;/code&gt; on the official &lt;a href='https://pandas.pydata.org/pandas-docs/stable/generated/pandas.pivot.html'&gt;documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="pivot"></category><category term="python"></category><category term="pandas"></category></entry></feed>