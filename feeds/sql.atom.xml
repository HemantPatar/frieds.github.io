<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan Friedman's Data Science Knowledge Base - SQL</title><link href="https://dfrieds.com/" rel="alternate"></link><link href="https://dfrieds.com/feeds/sql.atom.xml" rel="self"></link><id>https://dfrieds.com/</id><updated>2019-04-08T20:20:00-07:00</updated><entry><title>Rank Scores via Leetcode</title><link href="https://dfrieds.com/sql/rank-scores" rel="alternate"></link><published>2019-04-08T20:20:00-07:00</published><updated>2019-04-08T20:20:00-07:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2019-04-08:/sql/rank-scores</id><summary type="html">&lt;p&gt;Medium level Leetcode SQL problem and explanation of ranking scores using a window function&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;em&gt;extreme detail&lt;/em&gt;, in this tutorial I'll walk through a &lt;a href="https://leetcode.com/problems/rank-scores/description/" target="_blank"&gt;Leetcode medium level SQL problem&lt;/a&gt; to arrive to the solution.&lt;/p&gt;
&lt;h3&gt;Problem Statement via Leetcode&lt;/h3&gt;
&lt;p&gt;Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no "holes" between ranks.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Id&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3.50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3.65&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3.85&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.65&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For example, given the above Scores table, your query should generate the following report (order by highest score):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Rank&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4.00&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.00&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.85&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.65&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.65&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.50&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Dan's Step by Step Solution&lt;/h3&gt;
&lt;h4&gt;Use DENSE_RANK() to Get Ranking of Scores in Descending Order&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Explanation of SQL Query Below:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I create a new column using the &lt;code&gt;DENSE_RANK()&lt;/code&gt; method that is applied over all rows and &lt;code&gt;Score&lt;/code&gt; values and the rows are ordered by &lt;code&gt;Score&lt;/code&gt; from greatest to least.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;DENSE_RANK()&lt;/code&gt; method doesn't skip any rank numeric values. Any numeric values of the same size will get the same rank value. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL Query:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;Score&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;DENSE_RANK&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;Score&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Rank&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;Scores&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Returned Output:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Rank&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4.00&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.00&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.85&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.65&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.65&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.50&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="window function"></category><category term="DENSE_RANK()"></category></entry><entry><title>Score Deviation from Mean</title><link href="https://dfrieds.com/sql/score-deviation-mean" rel="alternate"></link><published>2019-04-08T18:00:00-07:00</published><updated>2019-04-08T18:00:00-07:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2019-04-08:/sql/score-deviation-mean</id><summary type="html">&lt;p&gt;SQL problem to find the deviation of scores from their mean. Requires use of a window function.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Problem Statement&lt;/h3&gt;
&lt;p&gt;Compute the deviance of each person's ACT score from the average ACT score from all students in the table below called &lt;code&gt;student_ACT_scores&lt;/code&gt;. Return first_name, score and ACT_score_deviation_mean with deviance in descending order.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;ACT_score&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Jake&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Maddie&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Luis&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Angela&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;We can use a window function to apply an aggregate function to all rows in a table. The code &lt;code&gt;AVG(ACT_score) OVER ()&lt;/code&gt; applies the average ACT score over the entire table. There is no re-ordering of rows or partioning of groups in the window function.&lt;/p&gt;
&lt;p&gt;Given that new average ACT score in a column, we can perform the subtraction operation in the &lt;code&gt;SELECT&lt;/code&gt; statement. Lastly, we order records from highest &lt;code&gt;CT_score_deviation_mean&lt;/code&gt; to smallest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL Query:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
       &lt;span class="n"&gt;ACT_score&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;AVG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACT_score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;ACT_score_deviation_mean&lt;/span&gt;
       &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;student_ACT_scores&lt;/span&gt;
       &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;ACT_score_deviation_mean&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Returned Output:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;ACT_score&lt;/th&gt;
&lt;th&gt;ACT_score_deviation_mean&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Jake&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Angela&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Luis&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Maddie&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;-3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="window function"></category><category term="AVG()"></category><category term="ORDER BY"></category></entry><entry><title>Find Three Consecutive Numbers via Leetcode</title><link href="https://dfrieds.com/sql/three-consec-numbers" rel="alternate"></link><published>2019-04-07T10:01:00-07:00</published><updated>2019-04-07T10:01:00-07:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2019-04-07:/sql/three-consec-numbers</id><summary type="html">&lt;p&gt;Medium level Leetcode SQL problem and step-by-step explanation of identifying a unique number that is repeated three times consecutively in a table through using window functions&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;em&gt;extreme detail&lt;/em&gt;, in this tutorial I'll walk through a &lt;a href="https://leetcode.com/problems/consecutive-numbers" target="_blank"&gt;Leetcode medium level SQL problem&lt;/a&gt; to arrive to the solution.&lt;/p&gt;
&lt;h3&gt;Problem Statement&lt;/h3&gt;
&lt;p&gt;Write a SQL query to find all numbers that appear at least three times consecutively.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Id&lt;/th&gt;
&lt;th&gt;Num&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For example, given the above &lt;code&gt;Logs&lt;/code&gt; table, &lt;code&gt;1&lt;/code&gt; is the only number that appears consecutively for at least three times.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ConsecutiveNums&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Dan's Step by Step Solution&lt;/h3&gt;
&lt;h4&gt;Create New Columns for Lag and Lead Numbers From &lt;code&gt;Num&lt;/code&gt; Column&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Explanation of SQL Query Below:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given the &lt;code&gt;Logs&lt;/code&gt; table above, I'm curious for each record, what's the following row number and previous row number. If I return an output in which the original number in the row, following row number and previous row number are all the same, then I know that number appears consecutively &lt;em&gt;at least&lt;/em&gt; three times.&lt;/p&gt;
&lt;p&gt;We can use window functions to compare previous and following rows in a table.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;LEAD()&lt;/code&gt; function creates a new column of the following row's &lt;code&gt;Num&lt;/code&gt; from the original table - exactly how it's ordered with &lt;code&gt;Id&lt;/code&gt; values in descending order. We alias this column as &lt;code&gt;following row number&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;LAG()&lt;/code&gt; function creates a new column of the following row's &lt;code&gt;Num&lt;/code&gt; from the original table - exactly how it's ordered with &lt;code&gt;Id&lt;/code&gt; values in descending order. We alias this column as &lt;code&gt;previous row number&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Learn more about &lt;code&gt;LEAD()&lt;/code&gt; and &lt;code&gt;LAG()&lt;/code&gt; functions in &lt;a href='https://mode.com/resources/sql-tutorial/sql-window-functions/' target='_blank'&gt;Mode's great tutorial on window functions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL Query:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;Num&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
       &lt;span class="n"&gt;LEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;following row number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
       &lt;span class="n"&gt;LAG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;previous row number&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;Logs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Returned Output:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;number&lt;/th&gt;
&lt;th&gt;following row number&lt;/th&gt;
&lt;th&gt;previous row number&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Return Rows with Same Number in All Three Columns&lt;/h4&gt;
&lt;p&gt;Given the output above, we can see one row in which &lt;code&gt;number&lt;/code&gt; is equal to &lt;code&gt;following row number&lt;/code&gt; which is equal to &lt;code&gt;previous row number&lt;/code&gt;. That number, &lt;code&gt;1&lt;/code&gt;, is the solution of a number that appears consecutively for at least three times.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explanation of SQL Query Below:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given the previous query's output, we can use a subquery to just return one row in which &lt;code&gt;number&lt;/code&gt; is equal to &lt;code&gt;following row number&lt;/code&gt; which is equal to &lt;code&gt;previous row number&lt;/code&gt;. We filter our underlying table, &lt;code&gt;sub&lt;/code&gt;, with the &lt;code&gt;WHERE&lt;/code&gt; clauses in the last two lines of the query.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL Query:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;Num&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
       &lt;span class="n"&gt;LEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;following row number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
       &lt;span class="n"&gt;LAG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;previous row number&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;Logs&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;number&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;following row number&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;following row number&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;previous row number&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Returned Output:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;number&lt;/th&gt;
&lt;th&gt;following row number&lt;/th&gt;
&lt;th&gt;previous row number&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Return Distinct &lt;code&gt;number&lt;/code&gt; From Previous Query&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Explanation of SQL Query Below:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given our output above, we want to filter this output to just return the distinct values that appear in the &lt;code&gt;number&lt;/code&gt; column which should just be 1 for this example.&lt;/p&gt;
&lt;p&gt;Use the &lt;a href='https://mode.com/resources/sql-tutorial/sql-distinct/' target="_blank"&gt;&lt;code&gt;DISTINCT&lt;/code&gt; statement&lt;/a&gt; to select only distinct values in the &lt;code&gt;number&lt;/code&gt; column in our &lt;code&gt;sub&lt;/code&gt; table and alias this column as &lt;code&gt;ConsecutiveNums&lt;/code&gt; to match Leetcode's desired solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL Query:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;number&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;ConsecutiveNums&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;Num&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
       &lt;span class="n"&gt;LEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;following row number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
       &lt;span class="n"&gt;LAG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;previous row number&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;Logs&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;number&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;following row number&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;following row number&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;previous row number&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Returned Output:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ConsecutiveNums&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="window function"></category><category term="LAG() function"></category><category term="LEAD() function"></category><category term="WHERE clause"></category><category term="subquery"></category></entry><entry><title>Department Top Three Salaries via Leetcode</title><link href="https://dfrieds.com/sql/dept-top-salaries" rel="alternate"></link><published>2019-04-07T10:00:00-07:00</published><updated>2019-04-07T10:00:00-07:00</updated><author><name>Dan Friedman</name></author><id>tag:dfrieds.com,2019-04-07:/sql/dept-top-salaries</id><summary type="html">&lt;p&gt;Advanced Leetcode SQL problem and step-by-step explanation of identifying top employees in departments by salary through using window functions&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;em&gt;extreme detail&lt;/em&gt;, in this tutorial I'll walk through a &lt;a href="https://leetcode.com/problems/department-top-three-salaries/" target="_blank"&gt;Leetcode Advanced SQL problem&lt;/a&gt; to arrive to the solution.&lt;/p&gt;
&lt;h3&gt;Problem Statement&lt;/h3&gt;
&lt;p&gt;The Employee table holds all employees. Every employee has an Id, and there is also a column for the department Id.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Id&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Salary&lt;/th&gt;
&lt;th&gt;DepartmentId&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Joe&lt;/td&gt;
&lt;td&gt;85000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Henry&lt;/td&gt;
&lt;td&gt;80000&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Sam&lt;/td&gt;
&lt;td&gt;60000&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Max&lt;/td&gt;
&lt;td&gt;90000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Janet&lt;/td&gt;
&lt;td&gt;69000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Randy&lt;/td&gt;
&lt;td&gt;85000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Will&lt;/td&gt;
&lt;td&gt;70000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Department table holds all departments of the company.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Id&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Sales&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Write a SQL query to find employees who earn the top three salaries in each of the department. For the above tables, your SQL query should return the following rows (order of rows does not matter).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Department&lt;/th&gt;
&lt;th&gt;Employee&lt;/th&gt;
&lt;th&gt;Salary&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Max&lt;/td&gt;
&lt;td&gt;90000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Randy&lt;/td&gt;
&lt;td&gt;85000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Joe&lt;/td&gt;
&lt;td&gt;85000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Will&lt;/td&gt;
&lt;td&gt;70000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sales&lt;/td&gt;
&lt;td&gt;Henry&lt;/td&gt;
&lt;td&gt;80000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sales&lt;/td&gt;
&lt;td&gt;Sam&lt;/td&gt;
&lt;td&gt;60000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;p&gt;In IT department, Max earns the highest salary, both Randy and Joe earn the second highest salary, and Will earns the third highest salary. There are only two employees in the Sales department, Henry earns the highest salary while Sam earns the second highest salary.&lt;/p&gt;
&lt;h3&gt;Dan's Step by Step Solution&lt;/h3&gt;
&lt;h4&gt;Join Tables to Get Relevant Columns&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Explanation of SQL Query Below:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are provided two tables: &lt;code&gt;Employee&lt;/code&gt; and &lt;code&gt;Department&lt;/code&gt;. In our final result, we need three fields: the department name, the employee's name and the employee's salary. Since these three columns are in two different tables, we need to join the two tables.&lt;/p&gt;
&lt;p&gt;We know this is a relational database in that the two tables "relate" to one another with common identifiers from each.&lt;/p&gt;
&lt;p&gt;The term “relational database” refers to the fact that the tables within it “relate” to one another—they contain common identifiers that allow information from multiple tables to be combined easily.&lt;/p&gt;
&lt;p&gt;The column &lt;code&gt;Id&lt;/code&gt; in the &lt;code&gt;Department&lt;/code&gt; table is a primary key. This key uniquely identifies each department in the company. We cannot have two &lt;code&gt;Id&lt;/code&gt; values that are the exact same number in this table!&lt;/p&gt;
&lt;p&gt;Similarly, the &lt;code&gt;Employee&lt;/code&gt; table has a foreign key of &lt;code&gt;DepartmentId&lt;/code&gt; that "relates" to the &lt;code&gt;Id&lt;/code&gt; field in the &lt;code&gt;Department&lt;/code&gt; table. Therefore, we can join the two tables together and retrieve the necessary columns to solve this problem.&lt;/p&gt;
&lt;p&gt;We choose a &lt;code&gt;INNER JOIN&lt;/code&gt; because we want to return all records from the &lt;code&gt;Employee&lt;/code&gt; table in which there is a corresponding match for the department name that the employee works in via the &lt;code&gt;Department&lt;/code&gt; table.&lt;/p&gt;
&lt;p&gt;To succinctly write out the elements of the SQL query below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the &lt;code&gt;Name&lt;/code&gt; column from the &lt;code&gt;Department&lt;/code&gt; table and alias it as &lt;code&gt;"Department"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;name&lt;/code&gt; column from the &lt;code&gt;Employee&lt;/code&gt; table and alias it as &lt;code&gt;"Employee"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;Salary&lt;/code&gt; column from the &lt;code&gt;Salary&lt;/code&gt; table and alias it as &lt;code&gt;"Salary"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select the columns from the &lt;code&gt;Employee&lt;/code&gt; table&lt;/li&gt;
&lt;li&gt;Inner join the &lt;code&gt;Department&lt;/code&gt; table on records in which the &lt;code&gt;Id&lt;/code&gt; field from the &lt;code&gt;Department&lt;/code&gt; table is equal to the &lt;code&gt;DepartmentId&lt;/code&gt; field from the &lt;code&gt;Employee&lt;/code&gt; table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SQL Query:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Department&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Employee&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Salary&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Salary&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;
&lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;
&lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DepartmentId&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Returned Output:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Department&lt;/th&gt;
&lt;th&gt;Employee&lt;/th&gt;
&lt;th&gt;Salary&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Will&lt;/td&gt;
&lt;td&gt;70000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Randy&lt;/td&gt;
&lt;td&gt;85000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Janet&lt;/td&gt;
&lt;td&gt;69000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Max&lt;/td&gt;
&lt;td&gt;90000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Joe&lt;/td&gt;
&lt;td&gt;85000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sales&lt;/td&gt;
&lt;td&gt;Sam&lt;/td&gt;
&lt;td&gt;60000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sales&lt;/td&gt;
&lt;td&gt;Henry&lt;/td&gt;
&lt;td&gt;80000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Create a New Column for Salary Rank In Descending Order of Employees by Department&lt;/h4&gt;
&lt;p&gt;The output above provides all relevant columns needed for the final solution. However, we need to rank employee salaries in descending order by their apartment. To do this, we'll use a window function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explanation of SQL Query Below:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Compared to the query above, there is just one new statement that starts with &lt;code&gt;DENSE_RANK()&lt;/code&gt; and is a window function. You can learn more about window functions in detail from Mode's great &lt;a href='https://mode.com/resources/sql-tutorial/sql-window-functions/' target="_blank"&gt;tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the window function statement, there's 3 major elements. &lt;/p&gt;
&lt;p&gt;We use the function &lt;code&gt;DENSE_RANK()&lt;/code&gt; to provide a numerical ranking value based on the following conditions. We don't want to skip any numerical rank values so we use &lt;code&gt;DENSE_RANK()&lt;/code&gt; instead of &lt;code&gt;RANK()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We want a rank of salaries by department; therefore, the window will consider the group &lt;code&gt;Department.Id&lt;/code&gt;. So salaries can be ranked from greatest to least, starting at &lt;code&gt;1&lt;/code&gt;, in the &lt;code&gt;IT&lt;/code&gt; department and separately from greatest to least, starting at &lt;code&gt;1&lt;/code&gt;, in the &lt;code&gt;Sales&lt;/code&gt; department.&lt;/p&gt;
&lt;p&gt;We want the the &lt;code&gt;DENSE_RANK&lt;/code&gt; function applied to rank the salaries from greatest to least. &lt;code&gt;ORDER BY Employee.Salary DESC&lt;/code&gt; helps sort the salaries of employees from greatest to least - called descending order in SQL.&lt;/p&gt;
&lt;p&gt;To succinctly write out the elements of the SQL query below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the &lt;code&gt;Name&lt;/code&gt; column from the &lt;code&gt;Department&lt;/code&gt; table and alias it as &lt;code&gt;"Department"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;name&lt;/code&gt; column from the &lt;code&gt;Employee&lt;/code&gt; table and alias it as &lt;code&gt;"Employee"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;Salary&lt;/code&gt; column from the &lt;code&gt;Salary&lt;/code&gt; table and alias it as &lt;code&gt;"Salary"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create new column called &lt;code&gt;salary_rank&lt;/code&gt; that provides a numerical value of the rank of each person's salary from greatest salary to smallest salary for each department.&lt;/li&gt;
&lt;li&gt;Select the columns from the &lt;code&gt;Employee&lt;/code&gt; table&lt;/li&gt;
&lt;li&gt;Inner join the &lt;code&gt;Department&lt;/code&gt; table on records in which the &lt;code&gt;Id&lt;/code&gt; field from the &lt;code&gt;Department&lt;/code&gt; table is equal to the &lt;code&gt;DepartmentId&lt;/code&gt; field from the &lt;code&gt;Employee&lt;/code&gt; table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SQL Query:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Department&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Employee&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Salary&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Salary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;DENSE_RANK&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Salary&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;salary_rank&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;
&lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;
&lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DepartmentId&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Returned Output:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Department&lt;/th&gt;
&lt;th&gt;Employee&lt;/th&gt;
&lt;th&gt;Salary&lt;/th&gt;
&lt;th&gt;salary_rank&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Max&lt;/td&gt;
&lt;td&gt;90000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Randy&lt;/td&gt;
&lt;td&gt;85000&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Joe&lt;/td&gt;
&lt;td&gt;85000&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Will&lt;/td&gt;
&lt;td&gt;70000&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Janet&lt;/td&gt;
&lt;td&gt;69000&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sales&lt;/td&gt;
&lt;td&gt;Henry&lt;/td&gt;
&lt;td&gt;80000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sales&lt;/td&gt;
&lt;td&gt;Sam&lt;/td&gt;
&lt;td&gt;60000&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Return 3 Necessary Colums and Top 3 Ranked Salaries by Department&lt;/h4&gt;
&lt;p&gt;The above query isn't our final solution yet. We have an extra unecessary column to show in the final output, &lt;code&gt;salary_rank&lt;/code&gt;, and a &lt;code&gt;salary_rank&lt;/code&gt; value of &lt;code&gt;4&lt;/code&gt; for &lt;code&gt;Janet&lt;/code&gt;, who isn't a top three salary in the &lt;code&gt;IT&lt;/code&gt; department.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explanation of SQL Query Below:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Subquery and where clause explanation...&lt;/p&gt;
&lt;p&gt;From the returned output above, we need to exclude the &lt;code&gt;salary_rank&lt;/code&gt; column and the record for &lt;code&gt;Janet&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To exclude the &lt;code&gt;salary_rank&lt;/code&gt; colum, we'll use the subquery functionality in SQL. Learn more about subqueries via Mode's excellent &lt;a href='https://mode.com/resources/sql-tutorial/sql-subqueries/' target="_blank"&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the execution of the query below, first, the inner query (our query in the previous step) is executed and is the underlying table used for the subquery. &lt;/p&gt;
&lt;p&gt;With the subquery, we have the first three new lines at the top of our query to just select the columns we want in the final output. Notice we're selecting these columns from a new table called &lt;code&gt;sub&lt;/code&gt;. The underlying table (our query in the previous step) has an alias of &lt;code&gt;sub&lt;/code&gt; that's short for subquery. &lt;/p&gt;
&lt;p&gt;This would output a table with the same number of rows as the query in the previous step except it would &lt;em&gt;not&lt;/em&gt; include the &lt;code&gt;salary_column&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Initially, the question asked to return the people's records who are in the top three salaries of their department. We can use the &lt;code&gt;WHERE&lt;/code&gt; clause in the final line to only select records from the underlying table in which the &lt;code&gt;salary_rank&lt;/code&gt; value is less than or equal to &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL Query:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Department&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
       &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Employee&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
       &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Salary&amp;quot;&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Department&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Employee&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Salary&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Salary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;DENSE_RANK&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Salary&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;salary_rank&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;
&lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;
&lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DepartmentId&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salary_rank&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Returned Output:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Department&lt;/th&gt;
&lt;th&gt;Employee&lt;/th&gt;
&lt;th&gt;Salary&lt;/th&gt;
&lt;th&gt;salary_rank&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Max&lt;/td&gt;
&lt;td&gt;90000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Randy&lt;/td&gt;
&lt;td&gt;85000&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Joe&lt;/td&gt;
&lt;td&gt;85000&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT&lt;/td&gt;
&lt;td&gt;Will&lt;/td&gt;
&lt;td&gt;70000&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sales&lt;/td&gt;
&lt;td&gt;Henry&lt;/td&gt;
&lt;td&gt;80000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sales&lt;/td&gt;
&lt;td&gt;Sam&lt;/td&gt;
&lt;td&gt;60000&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We are done!!&lt;/p&gt;</content><category term="window function"></category><category term="DENSE_RANK()"></category><category term="WHERE clause"></category><category term="subquery"></category><category term="INNER JOIN"></category></entry></feed>